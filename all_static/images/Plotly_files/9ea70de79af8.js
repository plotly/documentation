window.analytics=(function(window,ENV){'use strict';if(!ENV.MIXPANEL_ENABLED||(typeof(window.mixpanel)==='undefined')){window.mixpanel={track:function(){console.log('skip mixpanel track()');},identify:function(){console.log('skip mixpanel identify()');},alias:function(){console.log('skip mixpanel alias()');},get_distinct_id:function(){console.log('skip mixpanel get_distinct_id()');},register_once:function(){console.log('skip mixpanel register_once()');}};}
function _init(){if(isUserSignedIn()){var username=getSignedInUsername();mixpanel.identify(username);}
if(!window.IS_EMBEDPLOT_PAGE){var urls=_getUrls();var meta={};if(urls.url_group==='shareplot'){var pathname=window.location.pathname;var usernameStart=2;var usernameEnd=pathname.substr(usernameStart,pathname.length).indexOf('/');var shareplotOwner=pathname.substr(usernameStart,usernameEnd);meta={"shareplotOwner":shareplotOwner,"visitingTheirOwnShareplot":getSignedInUsername()===shareplotOwner};}
track('Page visit',meta);}};function track(event,baseData,fetchData){var fetch=fetchData||{};if(fetch.embeddingDomain){var domain=_embeddingDomain();baseData["Embedding domain"]=domain;baseData["Embedded on plot.ly"]=(domain.indexOf('plot.ly')!=-1);}
var fullData=_withPageWideProperties(baseData||{})
console.log("Mixpanel",event,fullData)
mixpanel.track(event,fullData);};function _embeddingDomain(){if(window.location==window.parent.location){return window.location.host;}else{var parser=document.createElement('a')
parser.href=document.referrer;return parser.host;}}
function _withPageWideProperties(extraProperties){var p=_getUrls();p.plotlyUsername=getSignedInUsername();for(var ep in extraProperties){p[ep]=extraProperties[ep];}
return p;}
function _getUrls(){function Urls(url){this.url=url;this.groupUrl=url;}
Urls.prototype.get=function(){return{url:this.url,url_group:this.groupUrl};};Urls.prototype.groupUrlByStart=function(startUrls,group){for(var i in startUrls){if(this.url.indexOf(startUrls[i])===0){this.groupUrl=group;}}};Urls.prototype.shareplotOrProfile=function(){if(this.url.indexOf('~')===1||this.url.indexOf('%7')===1){var secondSlashIndex=this.url.substr(1,this.url.length).indexOf('/');secondSlashIndex=(secondSlashIndex===-1?-1:secondSlashIndex+1);if(secondSlashIndex===-1||secondSlashIndex===this.url.length-1){this.groupUrl='profile';}else{this.groupUrl='shareplot';}}};var urls=new Urls(window.location.pathname);urls.shareplotOrProfile();var apiLangs=['/python','/matlab','/r','/nodejs','/julia','/matplotlib','/ggplot2'];urls.groupUrlByStart(apiLangs,'apiDocs');var devApis=['/javascript-graphing-library','/rest','/streaming'];urls.groupUrlByStart(devApis,'apiDocsDev');var learnUrls=['/how-to-sign-up-to-plotly','/add-data-to-the-plotly-grid','/how-to-share-and-print-plotly-graphs','/how-to-embed-plotly-graphs-in-websites','/how-to-create-a-line-of-best-fits','/how-to-make-a-line-graph-and-scatter-plot-online','/how-to-make-a-bar-chart-online','/how-to-make-an-area-chart-online','/how-to-make-a-histogram-online','/how-to-make-a-box-plot-online','/how-to-make-a-heatmap-online','/how-to-make-a-graph-with-error-bars-online','/how-to-make-a-graph-with-multiple-axes-online','/basic-statistics-tutorial','/histogram','/box-plot','/how-to-make-a-3d-scatter-plot-online/','/how-to-make-a-3d-line-chart-online/','/date-format-and-time-series/','/LaTeX-basics/','/adding-HTML-and-links-to-charts/'];urls.groupUrlByStart(learnUrls,'learnDocs');var excelUrls=['/create-charts-in-excel-with-plotly','/how-to-make-a-line-graph-and-scatter-plot-with-excel','/how-to-make-a-bar-chart-with-excel','/how-to-make-an-area-chart-with-excel','/how-to-make-a-histogram-with-excel','/how-to-make-a-box-plot-with-excel','/how-to-make-a-heatmap-with-excel','/how-to-make-a-graph-with-error-bars-with-excel','/how-to-make-a-graph-with-multiple-axes-with-excel'];urls.groupUrlByStart(excelUrls,'excelDocs');var workshopUrls=['/workshop','/arduino','/raspberry-pi','/electric-imp'];urls.groupUrlByStart(workshopUrls,'workshop');var productUrls=['/product','/online-graphing-and-statistics-for-educators'];urls.groupUrlByStart(productUrls,'product');return urls.get();}
function identifyUser(username,email,date_joined){try{if(username&&mixpanel.get_distinct_id()!=username){mixpanel.alias(username);}
mixpanel.identify(username);mixpanel.register_once({$email:email,$username:username,date_joined:date_joined});}
catch(e){console.log(e);}}
function markExperiment(experiment_name,bucket){var key="Experiment:"+experiment_name;var data={};data[key]=bucket;mixpanel.register_once(data);}
_init();return{identifyUser:identifyUser,markExperiment:markExperiment,track:track};})(window,ENV);window.Bucketeer=(function(window,ENV){var Options={debug:false,enabled:ENV.BUCKETEER_ENABLED};var currentExperiments={};var setupMixpanel=function(expName,bucket){analytics.markExperiment(expName,bucket);};var Experiment=(function(){var cookiePrefix='_buckets';var constructor=function(options){this.name=options.name;this.options=Utils.extend({buckets:null,onBucketed:null,qualify:null,sample:1.0},options);if((this.name===null)||(this.name===undefined)){throw('A name for this experiment must be specified');}
if(this.options.bucket===null){throw('Buckets must be specified for this experiment');}
if(Utils.size(options.buckets)<2){throw('You must specify at least 2 buckets for a experiment');}
this.buckets=Utils.keys(this.options.buckets);currentExperiments[this.name]=this;try{window.localStorage.setItem('bucketeer:testSetItem','Good To Go');if(window.localStorage.getItem('bucketeer:testSetItem')!=='Good To Go'){throw new Error('localStorage failure');}
this.run();}catch(e){console.log('Disqualified for experiment, localStorage disabled');}};constructor.prototype={run:function(){if(!Options.enabled){return}
var hash=window.location.hash;if(hash.indexOf('#')==0){hash=hash.slice(1,hash.length);}
var pairs=hash.split('&');for(var i=0;i<pairs.length;i++){var pair=pairs[i].split('=');var name=pair[0];var bucket=pair[1];if(this.name==name){Utils.log('Forcing experiment '+name+' into bucket '+bucket);this.setBucket(bucket);}}
var is_qualified=this.isQualified();if(is_qualified===null){if(!this.options.qualify||this.options.qualify()){is_qualified=Math.random()<=this.options.sample;this.setStoreVal('qualified',is_qualified?1:0);}}
if(is_qualified){if(!this.getBucket()){var partitions=1.0/Utils.size(this.options.buckets);var chosen_partition=Math.floor(Math.random()/partitions);var chosen_bucket=Utils.keys(this.options.buckets)[chosen_partition];this.setBucket(chosen_bucket);}else{var chosen_bucket=this.getBucket();}
setupMixpanel(this.name,chosen_bucket);if(this.options.onBucketed){this.options.onBucketed.apply(this,[this.name,chosen_bucket]);}
if(this.options.buckets[chosen_bucket].onChosen){this.options.buckets[chosen_bucket].onChosen();}}},isQualified:function(){if(this.getStoreVal('qualified')==1){return true;}else if(this.getStoreVal('qualified')==0){return false;}else{return null;}},inBucket:function(bucket){if(this.isQualified()){return this.getBucket()==bucket;}else{return false;}},getBucket:function(){if(this.isQualified()){return this.getStoreVal('bucket');}else{return null;}},setBucket:function(bucket){if(this.buckets.indexOf(bucket)==-1){return false;}else{this.setStoreVal('bucket',bucket);return true;}},setStoreVal:function(name,value){var key='bucketeer:'+this.name+':'+name;return localStorage.setItem(key,value);},getStoreVal:function(name){var key='bucketeer:'+this.name+':'+name;return localStorage.getItem(key);}};return constructor;})();var Utils={extend:function(destination,source){for(var property in source)
destination[property]=source[property];return destination;},size:function(object){var i=0;for(var property in object){i+=1;}
return i;},keys:function(object){var results=[];for(var property in object){results.push(property);}
return results;},log:function(message){if(window['console']&&Options.debug){if(console.log){console.log(message);}else{alert(message);}}}};var isQualified=function(expName){var exp=currentExperiments[expName];if(exp){return exp.isQualified();}
return false;};var inBucket=function(expName,bucketName){var exp=currentExperiments[expName];if(exp){return exp.inBucket(bucketName);}
return false;};return{Experiment:Experiment,Options:Options,isQualified:isQualified,inBucket:inBucket};})(window,ENV);