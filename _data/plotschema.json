{"sha1":"a32fd1cf98ee2943a1250fde66c4251b7570c136","modified":true,"schema":{"defs":{"valObjects":{"angle":{"requiredOpts":[],"description":"A number (in degree) between -180 and 180.","otherOpts":["dflt"]},"string":{"requiredOpts":[],"description":"A string value. Numbers are converted to strings except for attributes with `strict` set to true.","otherOpts":["dflt","noBlank","strict","arrayOk","values"]},"colorscale":{"requiredOpts":[],"description":"A Plotly colorscale either picked by a name: (any of Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis ) customized as an {array} of 2-element {arrays} where the first element is the normalized color level value (starting at *0* and ending at *1*), and the second item is a valid color string.","otherOpts":["dflt"]},"color":{"requiredOpts":[],"description":"A string describing color. Supported formats: - hex (e.g. '#d3d3d3') - rgb (e.g. 'rgb(255, 0, 0)') - rgba (e.g. 'rgb(255, 0, 0, 0.5)') - hsl (e.g. 'hsl(0, 100%, 50%)') - hsv (e.g. 'hsv(0, 100%, 100%)') - named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)","otherOpts":["dflt","arrayOk"]},"info_array":{"requiredOpts":["items"],"description":"An {array} of plot information.","otherOpts":["dflt","freeLength"]},"number":{"requiredOpts":[],"description":"A number or a numeric value (e.g. a number inside a string). When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.","otherOpts":["dflt","min","max","arrayOk"]},"flaglist":{"requiredOpts":["flags"],"description":"A string representing a combination of flags (order does not matter here). Combine any of the available `flags` with *+*. (e.g. ('lines+markers')). Values in `extras` cannot be combined.","otherOpts":["dflt","extras"]},"boolean":{"requiredOpts":[],"description":"A boolean (true/false) value.","otherOpts":["dflt"]},"enumerated":{"requiredOpts":["values"],"description":"Enumerated value type. The available values are listed in `values`.","otherOpts":["dflt","coerceNumber","arrayOk"]},"subplotid":{"requiredOpts":["dflt"],"description":"An id string of a subplot type (given by dflt), optionally followed by an integer >1. e.g. if dflt='geo', we can have 'geo', 'geo2', 'geo3', ...","otherOpts":[]},"data_array":{"requiredOpts":[],"description":"An {array} of data. The value MUST be an {array}, or we ignore it.","otherOpts":["dflt"]},"integer":{"requiredOpts":[],"description":"An integer or an integer inside a string. When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.","otherOpts":["dflt","min","max"]},"any":{"requiredOpts":[],"description":"Any type.","otherOpts":["dflt","values","arrayOk"]}},"metaKeys":["_isSubplotObj","_isLinkedToArray","_deprecated","description","role"]},"layout":{"layoutAttributes":{"orientation":{"valType":"angle","role":"info","description":"For polar plots only. Rotates the entire polar by the given angle."},"paper_bgcolor":{"valType":"color","role":"style","description":"Sets the color of paper where the graph is drawn.","dflt":"#fff"},"scene":{"_isSubplotObj":true,"domain":{"y":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the vertical domain of this scene (in plot fraction).","dflt":[0,1]},"x":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the horizontal domain of this scene (in plot fraction).","dflt":[0,1]},"role":"object"},"dragmode":{"values":["orbit","turntable","zoom","pan"],"valType":"enumerated","role":"info","description":"Determines the mode of drag interactions for this scene.","dflt":"turntable"},"yaxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"categoryarray":{"valType":"data_array","role":"data","description":"Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"mirror":{"role":"style","valType":"enumerated","values":[true,"ticks",false,"all","allticks"],"description":"Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.","dflt":false},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"autorange":{"role":"style","valType":"enumerated","values":[true,false,"reversed"],"description":"Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.","dflt":true},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"showspikes":{"valType":"boolean","role":"info","description":"Sets whether or not spikes starting from data points to this axis' wall are shown on hover.","dflt":true},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"spikecolor":{"valType":"color","role":"style","description":"Sets the color of the spikes.","dflt":"#444"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"spikesides":{"valType":"boolean","role":"info","description":"Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.","dflt":true},"spikethickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the spikes.","dflt":2,"min":0},"rangemode":{"role":"style","valType":"enumerated","values":["normal","tozero","nonnegative"],"description":"If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.","dflt":"normal"},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"role":"object","zeroline":{"valType":"boolean","role":"style","description":"Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."},"gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"rgb(204, 204, 204)"},"type":{"role":"info","valType":"enumerated","values":["-","linear","log","date","category"],"description":"Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.","dflt":"-"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"zerolinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the zero line.","dflt":1},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"categoryorder":{"role":"info","valType":"enumerated","values":["trace","category ascending","category descending","array"],"description":"Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.","dflt":"trace"},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"backgroundcolor":{"valType":"color","role":"style","description":"Sets the background color of this axis' wall.","dflt":"rgba(204, 204, 204, 0.5)"},"fixedrange":{"valType":"boolean","role":"info","description":"Determines whether or not this axis is zoom-able. If true, then zoom is disabled.","dflt":false},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":false},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"showbackground":{"valType":"boolean","role":"info","description":"Sets whether or not this axis' wall has a background color.","dflt":false},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"showaxeslabels":{"valType":"boolean","role":"info","description":"Sets whether or not this axis is labeled","dflt":true},"zerolinecolor":{"valType":"color","role":"style","description":"Sets the line color of the zero line.","dflt":"#444"},"range":{"items":[{"valType":"any"},{"valType":"any"}],"valType":"info_array","role":"info","description":"Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"categoryarraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  categoryarray ."},"calendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`","dflt":"gregorian"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"aspectmode":{"values":["auto","cube","data","manual"],"valType":"enumerated","role":"info","description":"If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.","dflt":"auto"},"bgcolor":{"valType":"color","role":"style","dflt":"rgba(0,0,0,0)"},"camera":{"role":"object","eye":{"y":{"valType":"number","role":"info","dflt":1.25},"x":{"valType":"number","role":"info","dflt":1.25},"z":{"valType":"number","role":"info","dflt":1.25},"role":"object","description":"Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene."},"up":{"y":{"valType":"number","role":"info","dflt":0},"x":{"valType":"number","role":"info","dflt":0},"z":{"valType":"number","role":"info","dflt":1},"role":"object","description":"Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up."},"center":{"y":{"valType":"number","role":"info","dflt":0},"x":{"valType":"number","role":"info","dflt":0},"z":{"valType":"number","role":"info","dflt":0},"role":"object","description":"Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation."}},"zaxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"categoryarray":{"valType":"data_array","role":"data","description":"Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"mirror":{"role":"style","valType":"enumerated","values":[true,"ticks",false,"all","allticks"],"description":"Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.","dflt":false},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"autorange":{"role":"style","valType":"enumerated","values":[true,false,"reversed"],"description":"Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.","dflt":true},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"showspikes":{"valType":"boolean","role":"info","description":"Sets whether or not spikes starting from data points to this axis' wall are shown on hover.","dflt":true},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"spikecolor":{"valType":"color","role":"style","description":"Sets the color of the spikes.","dflt":"#444"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"spikesides":{"valType":"boolean","role":"info","description":"Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.","dflt":true},"spikethickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the spikes.","dflt":2,"min":0},"rangemode":{"role":"style","valType":"enumerated","values":["normal","tozero","nonnegative"],"description":"If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.","dflt":"normal"},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"role":"object","zeroline":{"valType":"boolean","role":"style","description":"Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."},"gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"rgb(204, 204, 204)"},"type":{"role":"info","valType":"enumerated","values":["-","linear","log","date","category"],"description":"Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.","dflt":"-"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"zerolinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the zero line.","dflt":1},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"categoryorder":{"role":"info","valType":"enumerated","values":["trace","category ascending","category descending","array"],"description":"Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.","dflt":"trace"},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"backgroundcolor":{"valType":"color","role":"style","description":"Sets the background color of this axis' wall.","dflt":"rgba(204, 204, 204, 0.5)"},"fixedrange":{"valType":"boolean","role":"info","description":"Determines whether or not this axis is zoom-able. If true, then zoom is disabled.","dflt":false},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":false},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"showbackground":{"valType":"boolean","role":"info","description":"Sets whether or not this axis' wall has a background color.","dflt":false},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"showaxeslabels":{"valType":"boolean","role":"info","description":"Sets whether or not this axis is labeled","dflt":true},"zerolinecolor":{"valType":"color","role":"style","description":"Sets the line color of the zero line.","dflt":"#444"},"range":{"items":[{"valType":"any"},{"valType":"any"}],"valType":"info_array","role":"info","description":"Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"categoryarraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  categoryarray ."},"calendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`","dflt":"gregorian"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"xaxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"categoryarray":{"valType":"data_array","role":"data","description":"Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"mirror":{"role":"style","valType":"enumerated","values":[true,"ticks",false,"all","allticks"],"description":"Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.","dflt":false},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"autorange":{"role":"style","valType":"enumerated","values":[true,false,"reversed"],"description":"Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.","dflt":true},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"showspikes":{"valType":"boolean","role":"info","description":"Sets whether or not spikes starting from data points to this axis' wall are shown on hover.","dflt":true},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"spikecolor":{"valType":"color","role":"style","description":"Sets the color of the spikes.","dflt":"#444"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"spikesides":{"valType":"boolean","role":"info","description":"Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.","dflt":true},"spikethickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the spikes.","dflt":2,"min":0},"rangemode":{"role":"style","valType":"enumerated","values":["normal","tozero","nonnegative"],"description":"If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.","dflt":"normal"},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"role":"object","zeroline":{"valType":"boolean","role":"style","description":"Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."},"gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"rgb(204, 204, 204)"},"type":{"role":"info","valType":"enumerated","values":["-","linear","log","date","category"],"description":"Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.","dflt":"-"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"zerolinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the zero line.","dflt":1},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"categoryorder":{"role":"info","valType":"enumerated","values":["trace","category ascending","category descending","array"],"description":"Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.","dflt":"trace"},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"backgroundcolor":{"valType":"color","role":"style","description":"Sets the background color of this axis' wall.","dflt":"rgba(204, 204, 204, 0.5)"},"fixedrange":{"valType":"boolean","role":"info","description":"Determines whether or not this axis is zoom-able. If true, then zoom is disabled.","dflt":false},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":false},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"showbackground":{"valType":"boolean","role":"info","description":"Sets whether or not this axis' wall has a background color.","dflt":false},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"showaxeslabels":{"valType":"boolean","role":"info","description":"Sets whether or not this axis is labeled","dflt":true},"zerolinecolor":{"valType":"color","role":"style","description":"Sets the line color of the zero line.","dflt":"#444"},"range":{"items":[{"valType":"any"},{"valType":"any"}],"valType":"info_array","role":"info","description":"Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"categoryarraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  categoryarray ."},"calendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`","dflt":"gregorian"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"role":"object","aspectratio":{"y":{"valType":"number","role":"info","min":0},"x":{"valType":"number","role":"info","min":0},"z":{"valType":"number","role":"info","min":0},"role":"object","description":"Sets this scene's axis aspectratio."},"hovermode":{"values":["closest",false],"valType":"enumerated","role":"info","description":"Determines the mode of hover interactions for this scene.","dflt":"closest"},"_deprecated":{"cameraposition":{"valType":"info_array","role":"info","description":"Obsolete. Use `camera` instead."}}},"height":{"valType":"number","role":"info","description":"Sets the plot's height (in px).","dflt":450,"min":10},"radialaxis":{"domain":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Polar chart subplots are not supported yet. This key has currently no effect.","dflt":[0,1]},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the radial axis ticks will feature tick labels."},"orientation":{"valType":"number","role":"style","description":"Sets the orientation (an angle with respect to the origin) of the radial axis."},"ticklen":{"valType":"number","role":"style","description":"Sets the length of the tick lines on this radial axis.","min":0},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this axis will be visible."},"range":{"items":[{"valType":"number"},{"valType":"number"}],"valType":"info_array","role":"info","description":"Defines the start and end point of this radial axis."},"role":"object","ticksuffix":{"valType":"string","role":"style","description":"Sets the length of the tick lines on this radial axis."},"tickcolor":{"valType":"color","role":"style","description":"Sets the color of the tick lines on this radial axis."},"endpadding":{"valType":"number","role":"style"},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not the line bounding this radial axis will be shown on the figure."},"tickorientation":{"role":"style","valType":"enumerated","values":["horizontal","vertical"],"description":"Sets the orientation (from the paper perspective) of the radial axis tick labels."}},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"images":{"items":{"image":{"sizing":{"role":"info","valType":"enumerated","values":["fill","contain","stretch"],"description":"Specifies which dimension of the image to constrain.","dflt":"contain"},"opacity":{"description":"Sets the opacity of the image.","dflt":1,"min":0,"max":1,"role":"info","valType":"number"},"layer":{"role":"info","valType":"enumerated","values":["below","above"],"description":"Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.","dflt":"above"},"xref":{"role":"info","valType":"enumerated","values":["paper","/^x([2-9]|[1-9][0-9]+)?$/"],"description":"Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to an x data coordinate If set to *paper*, the `x` position refers to the distance from the left of plot in normalized coordinates where *0* (*1*) corresponds to the left (right).","dflt":"paper"},"xanchor":{"role":"info","valType":"enumerated","values":["left","center","right"],"description":"Sets the anchor for the x position","dflt":"left"},"source":{"valType":"string","role":"info","description":"Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute."},"yref":{"role":"info","valType":"enumerated","values":["paper","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y data coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plot in normalized coordinates where *0* (*1*) corresponds to the bottom (top).","dflt":"paper"},"yanchor":{"role":"info","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets the anchor for the y position.","dflt":"top"},"sizex":{"valType":"number","role":"info","description":"Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width.","dflt":0},"sizey":{"valType":"number","role":"info","description":"Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height.","dflt":0},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this image is visible.","dflt":true},"role":"object","y":{"valType":"any","role":"info","description":"Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info","dflt":0},"x":{"valType":"any","role":"info","description":"Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info","dflt":0}}},"role":"object"},"hovermode":{"values":["x","y","closest",false],"valType":"enumerated","role":"info","description":"Determines the mode of hover interactions."},"font":{"color":{"valType":"color","role":"style","dflt":"#444"},"role":"object","description":"Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.","family":{"description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","dflt":"\"Open Sans\", verdana, arial, sans-serif","noBlank":true,"strict":true,"role":"style","valType":"string"},"size":{"valType":"number","role":"style","dflt":12,"min":1}},"calendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the default calendar system to use for interpreting and displaying dates throughout the plot.","dflt":"gregorian"},"autosize":{"valType":"boolean","role":"info","description":"Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.","dflt":false},"title":{"valType":"string","role":"info","description":"Sets the plot's title.","dflt":"Click to enter Plot title"},"plot_bgcolor":{"valType":"color","role":"style","description":"Sets the color of plotting area in-between x and y axes.","dflt":"#fff"},"dragmode":{"values":["zoom","pan","select","lasso","orbit","turntable"],"valType":"enumerated","role":"info","description":"Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.","dflt":"zoom"},"smith":{"values":[false],"valType":"enumerated","role":"info","dflt":false},"width":{"valType":"number","role":"info","description":"Sets the plot's width (in px).","dflt":700,"min":10},"xaxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"categoryarray":{"valType":"data_array","role":"data","description":"Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"mirror":{"role":"style","valType":"enumerated","values":[true,"ticks",false,"all","allticks"],"description":"Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.","dflt":false},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"autorange":{"role":"style","valType":"enumerated","values":[true,false,"reversed"],"description":"Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.","dflt":true},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"position":{"description":"Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.","dflt":0,"min":0,"max":1,"role":"style","valType":"number"},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"overlaying":{"role":"info","valType":"enumerated","values":["free","/^x([2-9]|[1-9][0-9]+)?$/","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes."},"rangemode":{"role":"style","valType":"enumerated","values":["normal","tozero","nonnegative"],"description":"If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.","dflt":"normal"},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"role":"object","zeroline":{"valType":"boolean","role":"style","description":"Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."},"domain":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the domain of this axis (in plot fraction).","dflt":[0,1]},"gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"#eee"},"type":{"role":"info","valType":"enumerated","values":["-","linear","log","date","category"],"description":"Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.","dflt":"-"},"rangeselector":{"bordercolor":{"valType":"color","role":"style","description":"Sets the color of the border enclosing the range selector.","dflt":"#444"},"yanchor":{"role":"info","valType":"enumerated","values":["auto","top","middle","bottom"],"description":"Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.","dflt":"bottom"},"xanchor":{"role":"info","valType":"enumerated","values":["auto","left","center","right"],"description":"Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.","dflt":"left"},"bgcolor":{"valType":"color","role":"style","description":"Sets the background color of the range selector buttons.","dflt":"#eee"},"role":"object","buttons":{"items":{"button":{"count":{"valType":"number","role":"info","description":"Sets the number of steps to take to update the range. Use with `step` to specify the update interval.","dflt":1,"min":0},"description":"Sets the specifications for each buttons. By default, a range selector comes with no buttons.","stepmode":{"values":["backward","todate"],"valType":"enumerated","role":"info","description":"Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar.","dflt":"backward"},"label":{"valType":"string","role":"info","description":"Sets the text label to appear on the button."},"step":{"values":["month","year","day","hour","minute","second","all"],"valType":"enumerated","role":"info","description":"The unit of measurement that the `count` value will set the range by.","dflt":"month"},"role":"object"}},"role":"object"},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*."},"activecolor":{"valType":"color","role":"style","description":"Sets the background color of the active range selector button."},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the border enclosing the range selector.","dflt":0,"min":0},"y":{"max":3,"valType":"number","role":"style","description":"Sets the y position (in normalized coordinates) of the range selector.","min":-2},"x":{"max":3,"valType":"number","role":"style","description":"Sets the x position (in normalized coordinates) of the range selector.","min":-2},"font":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font of the range selector button text.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}}},"_deprecated":{"autotick":{"valType":"boolean","role":"info","description":"Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*."}},"_isSubplotObj":true,"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"zerolinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the zero line.","dflt":1},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"categoryorder":{"role":"info","valType":"enumerated","values":["trace","category ascending","category descending","array"],"description":"Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.","dflt":"trace"},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"fixedrange":{"valType":"boolean","role":"info","description":"Determines whether or not this axis is zoom-able. If true, then zoom is disabled.","dflt":false},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":false},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"side":{"role":"info","valType":"enumerated","values":["top","bottom","left","right"],"description":"Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area."},"zerolinecolor":{"valType":"color","role":"style","description":"Sets the line color of the zero line.","dflt":"#444"},"range":{"items":[{"valType":"any"},{"valType":"any"}],"valType":"info_array","role":"info","description":"Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"categoryarraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  categoryarray ."},"calendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`","dflt":"gregorian"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"rangeslider":{"bordercolor":{"valType":"color","role":"style","description":"Sets the border color of the range slider.","dflt":"#444"},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`","dflt":true},"thickness":{"description":"The height of the range slider as a fraction of the total plot area height.","dflt":0.15,"min":0,"max":1,"role":"style","valType":"number"},"bgcolor":{"valType":"color","role":"style","description":"Sets the background color of the range slider.","dflt":"#fff"},"range":{"items":[{"valType":"any"},{"valType":"any"}],"valType":"info_array","role":"info","description":"Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"role":"object","borderwidth":{"valType":"integer","role":"style","description":"Sets the border color of the range slider.","dflt":0,"min":0}},"anchor":{"role":"info","valType":"enumerated","values":["free","/^x([2-9]|[1-9][0-9]+)?$/","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`."},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"mapbox":{"layers":{"items":{"layer":{"opacity":{"description":"Sets the opacity of the layer.","dflt":1,"min":0,"max":1,"role":"info","valType":"number"},"sourcetype":{"role":"info","valType":"enumerated","values":["geojson","vector"],"description":"Sets the source type for this layer. Support for *raster*, *image* and *video* source types is coming soon.","dflt":"geojson"},"color":{"valType":"color","role":"style","description":"Sets the primary layer color. If `type` is *circle*, color corresponds to the circle color If `type` is *line*, color corresponds to the line color If `type` is *fill*, color corresponds to the fill color If `type` is *symbol*, color corresponds to the icon color","dflt":"#444"},"symbol":{"textposition":{"description":"Sets the positions of the `text` elements with respects to the (x,y) coordinates.","dflt":"middle center","role":"style","values":["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],"valType":"enumerated","arrayOk":false},"textfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the icon text font. Has an effect only when `type` is set to *symbol*.","family":{"description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","dflt":"Open Sans Regular, Arial Unicode MS Regular","noBlank":true,"strict":true,"role":"style","valType":"string"},"size":{"valType":"number","role":"style","min":1}},"iconsize":{"valType":"number","role":"style","description":"Sets the symbol icon size. Has an effect only when `type` is set to *symbol*.","dflt":10},"text":{"valType":"string","role":"info","description":"Sets the symbol text.","dflt":""},"role":"object","icon":{"valType":"string","role":"style","description":"Sets the symbol icon image. Full list: https://www.mapbox.com/maki-icons/","dflt":"marker"}},"source":{"valType":"any","role":"info","description":"Sets the source data for this layer. Source can be either a URL, a geojson object (with `sourcetype` set to *geojson*) or an array of tile URLS (with `sourcetype` set to *vector*)."},"below":{"valType":"string","role":"info","description":"Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.","dflt":""},"role":"object","sourcelayer":{"valType":"string","role":"info","description":"Specifies the layer to use from a vector tile source. Required for *vector* source type that supports multiple layers.","dflt":""},"circle":{"role":"object","radius":{"valType":"number","role":"style","description":"Sets the circle radius. Has an effect only when `type` is set to *circle*.","dflt":15}},"type":{"role":"info","valType":"enumerated","values":["circle","line","fill","symbol"],"description":"Sets the layer type. Support for *raster*, *background* types is coming soon. Note that *line* and *fill* are not compatible with Point GeoJSON geometries.","dflt":"circle"},"line":{"width":{"valType":"number","role":"style","description":"Sets the line width. Has an effect only when `type` is set to *line*.","dflt":2},"role":"object"},"fill":{"role":"object","outlinecolor":{"valType":"color","role":"style","description":"Sets the fill outline color. Has an effect only when `type` is set to *fill*.","dflt":"#444"}}}},"role":"object"},"bearing":{"valType":"number","role":"info","description":"Sets the bearing angle of the map (in degrees counter-clockwise from North).","dflt":0},"domain":{"y":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the vertical domain of this subplot (in plot fraction).","dflt":[0,1]},"x":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the horizontal domain of this subplot (in plot fraction).","dflt":[0,1]},"role":"object"},"center":{"lat":{"valType":"number","role":"info","description":"Sets the latitude of the center of the map (in degrees North).","dflt":0},"role":"object","lon":{"valType":"number","role":"info","description":"Sets the longitude of the center of the map (in degrees East).","dflt":0}},"accesstoken":{"strict":true,"valType":"string","role":"info","description":"Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`.","noBlank":true},"zoom":{"valType":"number","role":"info","description":"Sets the zoom level of the map.","dflt":1},"style":{"role":"style","valType":"any","values":["basic","streets","outdoors","light","dark","satellite","satellite-streets"],"description":"Sets the Mapbox map style. Either input one of the default Mapbox style names or the URL to a custom style or a valid Mapbox style JSON.","dflt":"basic"},"role":"object","pitch":{"valType":"number","role":"info","description":"Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map).","dflt":0},"_isSubplotObj":true},"hidesources":{"valType":"boolean","role":"info","description":"Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the plotly service (at https://plot.ly or on-premise).","dflt":false},"direction":{"role":"info","valType":"enumerated","values":["clockwise","counterclockwise"],"description":"For polar plots only. Sets the direction corresponding to positive angles."},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not a legend is drawn."},"separators":{"valType":"string","role":"style","description":"Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands.","dflt":".,"},"angularaxis":{"domain":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Polar chart subplots are not supported yet. This key has currently no effect.","dflt":[0,1]},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the angular axis ticks will feature tick labels."},"ticklen":{"valType":"number","role":"style","description":"Sets the length of the tick lines on this angular axis.","min":0},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this axis will be visible."},"range":{"items":[{"valType":"number","dflt":0},{"valType":"number","dflt":360}],"valType":"info_array","role":"info","description":"Defines the start and end point of this angular axis."},"role":"object","ticksuffix":{"valType":"string","role":"style","description":"Sets the length of the tick lines on this angular axis."},"tickcolor":{"valType":"color","role":"style","description":"Sets the color of the tick lines on this angular axis."},"endpadding":{"valType":"number","role":"style"},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not the line bounding this angular axis will be shown on the figure."},"tickorientation":{"role":"style","valType":"enumerated","values":["horizontal","vertical"],"description":"Sets the orientation (from the paper perspective) of the angular axis tick labels."}},"geo":{"domain":{"y":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the vertical domain of this map (in plot fraction).","dflt":[0,1]},"x":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the horizontal domain of this map (in plot fraction).","dflt":[0,1]},"role":"object"},"projection":{"role":"object","rotation":{"lat":{"valType":"number","role":"info","description":"Rotates the map along meridians (in degrees North)."},"role":"object","lon":{"valType":"number","role":"info","description":"Rotates the map along parallels (in degrees East)."},"roll":{"valType":"number","role":"info","description":"Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down."}},"scale":{"description":"Zooms in or out on the map view.","dflt":1,"min":0,"max":10,"role":"info","valType":"number"},"type":{"values":["equirectangular","mercator","orthographic","natural earth","kavrayskiy7","miller","robinson","eckert4","azimuthal equal area","azimuthal equidistant","conic equal area","conic conformal","conic equidistant","gnomonic","stereographic","mollweide","hammer","transverse mercator","albers usa","winkel tripel"],"valType":"enumerated","role":"info","description":"Sets the projection type."},"parallels":{"items":[{"valType":"number"},{"valType":"number"}],"valType":"info_array","role":"info","description":"For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere."}},"showframe":{"valType":"boolean","role":"info","description":"Sets whether or not a frame is drawn around the map."},"showlakes":{"valType":"boolean","role":"info","description":"Sets whether or not lakes are drawn.","dflt":false},"coastlinecolor":{"valType":"color","role":"style","description":"Sets the coastline color.","dflt":"#444"},"countrywidth":{"valType":"number","role":"style","description":"Sets line width (in px) of the country boundaries.","dflt":1,"min":0},"countrycolor":{"valType":"color","role":"style","description":"Sets line color of the country boundaries.","dflt":"#444"},"showsubunits":{"valType":"boolean","role":"info","description":"Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn."},"bgcolor":{"valType":"color","role":"style","description":"Set the background color of the map","dflt":"#fff"},"showrivers":{"valType":"boolean","role":"info","description":"Sets whether or not rivers are drawn.","dflt":false},"subunitcolor":{"valType":"color","role":"style","description":"Sets the color of the subunits boundaries.","dflt":"#444"},"showcountries":{"valType":"boolean","role":"info","description":"Sets whether or not country boundaries are drawn."},"riverwidth":{"valType":"number","role":"style","description":"Sets the stroke width (in px) of the rivers.","dflt":1,"min":0},"scope":{"values":["world","usa","europe","asia","africa","north america","south america"],"valType":"enumerated","role":"info","description":"Set the scope of the map.","dflt":"world"},"rivercolor":{"valType":"color","role":"style","description":"Sets color of the rivers.","dflt":"#3399FF"},"_isSubplotObj":true,"lataxis":{"tick0":{"valType":"number","role":"info","description":"Sets the graticule's starting tick longitude/latitude."},"gridwidth":{"valType":"number","role":"style","description":"Sets the graticule's stroke width (in px).","dflt":1,"min":0},"dtick":{"valType":"number","role":"info","description":"Sets the graticule's longitude/latitude tick step."},"showgrid":{"valType":"boolean","role":"info","description":"Sets whether or not graticule are shown on the map.","dflt":false},"range":{"items":[{"valType":"number"},{"valType":"number"}],"valType":"info_array","role":"info","description":"Sets the range of this axis (in degrees)."},"gridcolor":{"valType":"color","role":"style","description":"Sets the graticule's stroke color.","dflt":"#eee"},"role":"object"},"subunitwidth":{"valType":"number","role":"style","description":"Sets the stroke width (in px) of the subunits boundaries.","dflt":1,"min":0},"showocean":{"valType":"boolean","role":"info","description":"Sets whether or not oceans are filled in color.","dflt":false},"oceancolor":{"valType":"color","role":"style","description":"Sets the ocean color","dflt":"#3399FF"},"lakecolor":{"valType":"color","role":"style","description":"Sets the color of the lakes.","dflt":"#3399FF"},"role":"object","showland":{"valType":"boolean","role":"info","description":"Sets whether or not land masses are filled in color.","dflt":false},"lonaxis":{"tick0":{"valType":"number","role":"info","description":"Sets the graticule's starting tick longitude/latitude."},"gridwidth":{"valType":"number","role":"style","description":"Sets the graticule's stroke width (in px).","dflt":1,"min":0},"dtick":{"valType":"number","role":"info","description":"Sets the graticule's longitude/latitude tick step."},"showgrid":{"valType":"boolean","role":"info","description":"Sets whether or not graticule are shown on the map.","dflt":false},"range":{"items":[{"valType":"number"},{"valType":"number"}],"valType":"info_array","role":"info","description":"Sets the range of this axis (in degrees)."},"gridcolor":{"valType":"color","role":"style","description":"Sets the graticule's stroke color.","dflt":"#eee"},"role":"object"},"framecolor":{"valType":"color","role":"style","description":"Sets the color the frame.","dflt":"#444"},"coastlinewidth":{"valType":"number","role":"style","description":"Sets the coastline stroke width (in px).","dflt":1,"min":0},"landcolor":{"valType":"color","role":"style","description":"Sets the land mass color.","dflt":"#F0DC82"},"showcoastlines":{"valType":"boolean","role":"info","description":"Sets whether or not the coastlines are drawn."},"framewidth":{"valType":"number","role":"style","description":"Sets the stroke width (in px) of the frame.","dflt":1,"min":0},"resolution":{"description":"Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.","dflt":110,"role":"info","values":[110,50],"valType":"enumerated","coerceNumber":true}},"legend":{"bordercolor":{"valType":"color","role":"style","description":"Sets the color of the border enclosing the legend.","dflt":"#444"},"yanchor":{"role":"info","valType":"enumerated","values":["auto","top","middle","bottom"],"description":"Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend.","dflt":"auto"},"traceorder":{"role":"style","valType":"flaglist","extras":["normal"],"flags":["reversed","grouped"],"description":"Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*."},"xanchor":{"role":"info","valType":"enumerated","values":["auto","left","center","right"],"description":"Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend.","dflt":"left"},"orientation":{"role":"info","valType":"enumerated","values":["v","h"],"description":"Sets the orientation of the legend.","dflt":"v"},"tracegroupgap":{"valType":"number","role":"style","description":"Sets the amount of vertical space (in px) between legend groups.","dflt":10,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the legend background color."},"role":"object","borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the border enclosing the legend.","dflt":0,"min":0},"y":{"description":"Sets the y position (in normalized coordinates) of the legend.","dflt":1,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position (in normalized coordinates) of the legend.","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"font":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font used to text the legend items.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}}},"yaxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"categoryarray":{"valType":"data_array","role":"data","description":"Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"mirror":{"role":"style","valType":"enumerated","values":[true,"ticks",false,"all","allticks"],"description":"Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.","dflt":false},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"autorange":{"role":"style","valType":"enumerated","values":[true,false,"reversed"],"description":"Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.","dflt":true},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"position":{"description":"Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.","dflt":0,"min":0,"max":1,"role":"style","valType":"number"},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"overlaying":{"role":"info","valType":"enumerated","values":["free","/^x([2-9]|[1-9][0-9]+)?$/","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes."},"rangemode":{"role":"style","valType":"enumerated","values":["normal","tozero","nonnegative"],"description":"If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.","dflt":"normal"},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"role":"object","zeroline":{"valType":"boolean","role":"style","description":"Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."},"domain":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the domain of this axis (in plot fraction).","dflt":[0,1]},"gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"#eee"},"type":{"role":"info","valType":"enumerated","values":["-","linear","log","date","category"],"description":"Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.","dflt":"-"},"_deprecated":{"autotick":{"valType":"boolean","role":"info","description":"Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*."}},"_isSubplotObj":true,"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"zerolinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the zero line.","dflt":1},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"categoryorder":{"role":"info","valType":"enumerated","values":["trace","category ascending","category descending","array"],"description":"Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.","dflt":"trace"},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"fixedrange":{"valType":"boolean","role":"info","description":"Determines whether or not this axis is zoom-able. If true, then zoom is disabled.","dflt":false},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":false},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"side":{"role":"info","valType":"enumerated","values":["top","bottom","left","right"],"description":"Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area."},"zerolinecolor":{"valType":"color","role":"style","description":"Sets the line color of the zero line.","dflt":"#444"},"range":{"items":[{"valType":"any"},{"valType":"any"}],"valType":"info_array","role":"info","description":"Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"categoryarraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  categoryarray ."},"calendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`","dflt":"gregorian"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"anchor":{"role":"info","valType":"enumerated","values":["free","/^x([2-9]|[1-9][0-9]+)?$/","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`."},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"updatemenus":{"items":{"updatemenu":{"bordercolor":{"valType":"color","role":"style","description":"Sets the color of the border enclosing the update menu.","dflt":"#BEC8D9"},"yanchor":{"role":"info","valType":"enumerated","values":["auto","top","middle","bottom"],"description":"Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.","dflt":"top"},"direction":{"role":"info","valType":"enumerated","values":["left","right","up","down"],"description":"Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.","dflt":"down"},"showactive":{"valType":"boolean","role":"info","description":"Highlights active dropdown item or active button if true.","dflt":true},"xanchor":{"role":"info","valType":"enumerated","values":["auto","left","center","right"],"description":"Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.","dflt":"right"},"y":{"description":"Sets the y position (in normalized coordinates) of the update menu.","dflt":1,"min":-2,"max":3,"role":"style","valType":"number"},"bgcolor":{"valType":"color","role":"style","description":"Sets the background color of the update menu buttons."},"role":"object","buttons":{"items":{"button":{"args":{"freeLength":true,"valType":"info_array","role":"info","description":"Sets the arguments values to be passed to the Plotly method set in `method` on click.","items":[{"valType":"any"},{"valType":"any"},{"valType":"any"}]},"role":"object","method":{"role":"info","valType":"enumerated","values":["restyle","relayout","animate","update"],"description":"Sets the Plotly method to be called on click.","dflt":"restyle"},"label":{"valType":"string","role":"info","description":"Sets the text label to appear on the button.","dflt":""}}},"role":"object"},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not the update menu is visible."},"pad":{"b":{"valType":"number","role":"style","description":"The amount of padding (in px) along the bottom of the component.","dflt":0},"description":"Sets the padding around the buttons or dropdown menu.","l":{"valType":"number","role":"style","description":"The amount of padding (in px) on the left side of the component.","dflt":0},"r":{"valType":"number","role":"style","description":"The amount of padding (in px) on the right side of the component.","dflt":0},"role":"object","t":{"valType":"number","role":"style","description":"The amount of padding (in px) along the top of the component.","dflt":0}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the border enclosing the update menu.","dflt":1,"min":0},"active":{"valType":"integer","role":"info","description":"Determines which button (by index starting from 0) is considered active.","dflt":0,"min":-1},"x":{"description":"Sets the x position (in normalized coordinates) of the update menu.","dflt":-0.05,"min":-2,"max":3,"role":"style","valType":"number"},"font":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font of the update menu button text.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"type":{"role":"info","valType":"enumerated","values":["dropdown","buttons"],"description":"Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically","dflt":"dropdown"}}},"role":"object"},"annotations":{"items":{"annotation":{"bordercolor":{"valType":"color","role":"style","description":"Sets the color of the border enclosing the annotation `text`.","dflt":"rgba(0,0,0,0)"},"yanchor":{"role":"info","valType":"enumerated","values":["auto","top","middle","bottom"],"description":"Sets the annotation's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side.","dflt":"auto"},"text":{"valType":"string","role":"info","description":"Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported."},"arrowsize":{"valType":"number","role":"style","description":"Sets the size (in px) of annotation arrow head.","dflt":1,"min":0.3},"textangle":{"valType":"angle","role":"style","description":"Sets the angle at which the `text` is drawn with respect to the horizontal.","dflt":0},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the border enclosing the annotation `text`.","dflt":1,"min":0},"ay":{"valType":"any","role":"info","description":"Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is an axis, this is an absolute value on that axis, like `y`, NOT a relative value."},"ax":{"valType":"any","role":"info","description":"Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from right to left (left to right). If `axref` is an axis, this is an absolute value on that axis, like `x`, NOT a relative value."},"font":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the annotation text font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"arrowcolor":{"valType":"color","role":"style","description":"Sets the color of the annotation arrow."},"xref":{"role":"info","valType":"enumerated","values":["paper","/^x([2-9]|[1-9][0-9]+)?$/"],"description":"Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side."},"arrowhead":{"description":"Sets the annotation arrow head style.","dflt":1,"min":0,"max":8,"role":"style","valType":"integer"},"bgcolor":{"valType":"color","role":"style","description":"Sets the background color of the annotation.","dflt":"rgba(0,0,0,0)"},"role":"object","borderpad":{"valType":"number","role":"style","description":"Sets the padding (in px) between the `text` and the enclosing border.","dflt":1,"min":0},"showarrow":{"valType":"boolean","role":"style","description":"Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.","dflt":true},"opacity":{"description":"Sets the opacity of the annotation (text + arrow).","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"xanchor":{"role":"info","valType":"enumerated","values":["auto","left","center","right"],"description":"Sets the annotation's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side.","dflt":"auto"},"axref":{"role":"info","valType":"enumerated","values":["pixel","/^x([2-9]|[1-9][0-9]+)?$/"],"description":"Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ax` is a relative offset in pixels  from `x`. If set to an x axis id (e.g. *x* or *x2*), `ax` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed.","dflt":"pixel"},"ayref":{"role":"info","valType":"enumerated","values":["pixel","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ay` is a relative offset in pixels  from `y`. If set to a y axis id (e.g. *y* or *y2*), `ay` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed.","dflt":"pixel"},"arrowwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of annotation arrow.","min":0.1},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this annotation is visible.","dflt":true},"yref":{"role":"info","valType":"enumerated","values":["paper","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where 0 (1) corresponds to the bottom (top)."},"align":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets the vertical alignment of the `text` with respect to the set `x` and `y` position. Has only an effect if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags).","dflt":"center"},"y":{"valType":"any","role":"info","description":"Sets the annotation's y position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"x":{"valType":"any","role":"info","description":"Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."},"_deprecated":{"ref":{"valType":"string","role":"info","description":"Obsolete. Set `xref` and `yref` separately instead."}}}},"role":"object"},"shapes":{"items":{"shape":{"opacity":{"description":"Sets the opacity of the shape.","dflt":1,"min":0,"max":1,"role":"info","valType":"number"},"layer":{"role":"info","valType":"enumerated","values":["below","above"],"description":"Specifies whether shapes are drawn below or above traces.","dflt":"above"},"xref":{"role":"info","valType":"enumerated","values":["paper","/^x([2-9]|[1-9][0-9]+)?$/"],"description":"Sets the shape's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right) side. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds."},"yref":{"role":"info","valType":"enumerated","values":["paper","/^y([2-9]|[1-9][0-9]+)?$/"],"description":"Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top)."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this shape is visible.","dflt":true},"role":"object","fillcolor":{"valType":"color","role":"info","description":"Sets the color filling the shape's interior.","dflt":"rgba(0,0,0,0)"},"path":{"valType":"string","role":"info","description":"For `type` *path* - a valid SVG path but with the pixel values replaced by data values. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789"},"y1":{"valType":"any","role":"info","description":"Sets the shape's end y position. See `type` for more info."},"y0":{"valType":"any","role":"info","description":"Sets the shape's starting y position. See `type` for more info."},"x0":{"valType":"any","role":"info","description":"Sets the shape's starting x position. See `type` for more info."},"x1":{"valType":"any","role":"info","description":"Sets the shape's end x position. See `type` for more info."},"type":{"role":"info","valType":"enumerated","values":["circle","rect","path","line"],"description":"Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) If *path*, draw a custom SVG path using `path`."},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color."},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object"}}},"role":"object"},"sliders":{"items":{"slider":{"yanchor":{"role":"info","valType":"enumerated","values":["auto","top","middle","bottom"],"description":"Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.","dflt":"top"},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not the slider is visible.","dflt":true},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the border enclosing the slider.","dflt":1,"min":0},"font":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font of the slider step labels.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"bgcolor":{"valType":"color","role":"style","description":"Sets the background color of the slider.","dflt":"#f8fafc"},"pad":{"b":{"valType":"number","role":"style","description":"The amount of padding (in px) along the bottom of the component.","dflt":0},"description":"Set the padding of the slider component along each side.","l":{"valType":"number","role":"style","description":"The amount of padding (in px) on the left side of the component.","dflt":0},"r":{"valType":"number","role":"style","description":"The amount of padding (in px) on the right side of the component.","dflt":0},"role":"object","t":{"valType":"number","role":"style","description":"The amount of padding (in px) along the top of the component.","dflt":20}},"minorticklen":{"valType":"number","role":"style","description":"Sets the length in pixels of minor step tick marks","dflt":4,"min":0},"bordercolor":{"valType":"color","role":"style","description":"Sets the color of the border enclosing the slider.","dflt":"#bec8d9"},"xanchor":{"role":"info","valType":"enumerated","values":["auto","left","center","right"],"description":"Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.","dflt":"left"},"ticklen":{"valType":"number","role":"style","description":"Sets the length in pixels of step tick marks","dflt":7,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.","dflt":1,"min":0},"x":{"description":"Sets the x position (in normalized coordinates) of the slider.","dflt":0,"min":-2,"max":3,"role":"style","valType":"number"},"active":{"valType":"number","role":"info","description":"Determines which button (by index starting from 0) is considered active.","dflt":0,"min":0},"role":"object","currentvalue":{"xanchor":{"role":"info","valType":"enumerated","values":["left","center","right"],"description":"The alignment of the value readout relative to the length of the slider.","dflt":"left"},"suffix":{"valType":"string","role":"info","description":"When currentvalue.visible is true, this sets the suffix of the label."},"visible":{"valType":"boolean","role":"info","description":"Shows the currently-selected value above the slider.","dflt":true},"prefix":{"valType":"string","role":"info","description":"When currentvalue.visible is true, this sets the prefix of the label."},"role":"object","offset":{"valType":"number","role":"info","description":"The amount of space, in pixels, between the current value label and the slider.","dflt":10},"font":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font of the current value label text.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"transition":{"duration":{"valType":"number","role":"info","description":"Sets the duration of the slider transition","dflt":150,"min":0},"easing":{"role":"info","valType":"enumerated","values":["linear","quad","cubic","sin","exp","circle","elastic","back","bounce","linear-in","quad-in","cubic-in","sin-in","exp-in","circle-in","elastic-in","back-in","bounce-in","linear-out","quad-out","cubic-out","sin-out","exp-out","circle-out","elastic-out","back-out","bounce-out","linear-in-out","quad-in-out","cubic-in-out","sin-in-out","exp-in-out","circle-in-out","elastic-in-out","back-in-out","bounce-in-out"],"description":"Sets the easing function of the slider transition","dflt":"cubic-in-out"},"role":"object"},"activebgcolor":{"valType":"color","role":"style","description":"Sets the background color of the slider grip while dragging.","dflt":"#dbdde0"},"steps":{"items":{"step":{"args":{"freeLength":true,"valType":"info_array","role":"info","description":"Sets the arguments values to be passed to the Plotly method set in `method` on slide.","items":[{"valType":"any"},{"valType":"any"},{"valType":"any"}]},"role":"object","method":{"role":"info","valType":"enumerated","values":["restyle","relayout","animate","update"],"description":"Sets the Plotly method to be called when the slider value is changed.","dflt":"restyle"},"value":{"valType":"string","role":"info","description":"Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided."},"label":{"valType":"string","role":"info","description":"Sets the text label to appear on the slider"}}},"role":"object"},"y":{"description":"Sets the y position (in normalized coordinates) of the slider.","dflt":0,"min":-2,"max":3,"role":"style","valType":"number"},"tickcolor":{"valType":"color","role":"style","description":"Sets the color of the border enclosing the slider.","dflt":"#333"}}},"role":"object"},"ternary":{"_isSubplotObj":true,"domain":{"y":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the vertical domain of this subplot (in plot fraction).","dflt":[0,1]},"x":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the horizontal domain of this subplot (in plot fraction).","dflt":[0,1]},"role":"object"},"sum":{"valType":"number","role":"info","description":"The number each triplet should sum to, and the maximum range of each axis","dflt":1,"min":0},"caxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":6,"min":1},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.","dflt":true},"role":"object","gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"#eee"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":true},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"min":{"valType":"number","role":"info","description":"The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.","dflt":0,"min":0},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"aaxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":6,"min":1},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.","dflt":true},"role":"object","gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"#eee"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":true},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"min":{"valType":"number","role":"info","description":"The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.","dflt":0,"min":0},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}},"bgcolor":{"valType":"color","role":"style","description":"Set the background color of the subplot","dflt":"#fff"},"role":"object","baxis":{"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"color":{"valType":"color","role":"style","description":"Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.","dflt":"#444"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this axis' title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"linecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"linewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":6,"min":1},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of this axis."},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."},"showgrid":{"valType":"boolean","role":"style","description":"Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.","dflt":true},"role":"object","gridcolor":{"valType":"color","role":"style","description":"Sets the color of the grid lines.","dflt":"#eee"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"hoverformat":{"valType":"string","role":"style","description":"Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"showline":{"valType":"boolean","role":"style","description":"Determines whether or not a line bounding this axis is drawn.","dflt":true},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"min":{"valType":"number","role":"info","description":"The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.","dflt":0,"min":0},"gridwidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the grid lines.","dflt":1,"min":0},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"}}},"margin":{"b":{"valType":"number","role":"info","description":"Sets the bottom margin (in px).","dflt":80,"min":0},"l":{"valType":"number","role":"info","description":"Sets the left margin (in px).","dflt":80,"min":0},"r":{"valType":"number","role":"info","description":"Sets the right margin (in px).","dflt":80,"min":0},"pad":{"valType":"number","role":"info","description":"Sets the amount of padding (in px) between the plotting area and the axis lines","dflt":0,"min":0},"t":{"valType":"number","role":"info","description":"Sets the top margin (in px).","dflt":100,"min":0},"autoexpand":{"valType":"boolean","role":"info","dflt":true},"role":"object"}}},"animation":{"direction":{"values":["forward","reverse"],"valType":"enumerated","role":"info","description":"The direction in which to play the frames triggered by the animation call","dflt":"forward"},"transition":{"duration":{"valType":"number","role":"info","description":"The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.","dflt":500,"min":0},"easing":{"role":"info","valType":"enumerated","values":["linear","quad","cubic","sin","exp","circle","elastic","back","bounce","linear-in","quad-in","cubic-in","sin-in","exp-in","circle-in","elastic-in","back-in","bounce-in","linear-out","quad-out","cubic-out","sin-out","exp-out","circle-out","elastic-out","back-out","bounce-out","linear-in-out","quad-in-out","cubic-in-out","sin-in-out","exp-in-out","circle-in-out","elastic-in-out","back-in-out","bounce-in-out"],"description":"The easing function used for the transition","dflt":"cubic-in-out"},"role":"object"},"fromcurrent":{"valType":"boolean","role":"info","description":"Play frames starting at the current frame instead of the beginning.","dflt":false},"mode":{"values":["immediate","next","afterall"],"valType":"enumerated","role":"info","description":"Describes how a new animate call interacts with currently-running animations. If `immediate`, current animations are interrupted and the new animation is started. If `next`, the current frame is allowed to complete, after which the new animation is started. If `afterall` all existing frames are animated to completion before the new animation is started.","dflt":"afterall"},"frame":{"duration":{"valType":"number","role":"info","description":"The duration in milliseconds of each frame. If greater than the frame duration, it will be limited to the frame duration.","dflt":500,"min":0},"redraw":{"valType":"boolean","role":"info","description":"Redraw the plot at completion of the transition. This is desirable for transitions that include properties that cannot be transitioned, but may significantly slow down updates that do not require a full redraw of the plot","dflt":true},"role":"object"}},"transforms":{"filter":{"attributes":{"target":{"noBlank":true,"dflt":"x","strict":true,"valType":"string","arrayOk":true,"description":"Sets the filter target by which the filter is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To filter about nested variables, use *.* to access them. For example, set `target` to *marker.color* to filter about the marker color array. If an array, *target* is then the data array by which the filter is applied."},"enabled":{"valType":"boolean","description":"Determines whether this filter transform is enabled or disabled.","dflt":true},"value":{"valType":"any","description":"Sets the value or values by which to filter by. Values are expected to be in the same type as the data linked to *target*. When `operation` is set to one of the inequality values (=,<,>=,>,<=) *value* is expected to be a number or a string. When `operation` is set to one of the interval value ([],(),[),(],][,)(,](,)[) *value* is expected to be 2-item array where the first item is the lower bound and the second item is the upper bound. When `operation`, is set to one of the set value ({},}{) *value* is expected to be an array with as many items as the desired set elements.","dflt":0},"valuecalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `value`, if it is a date.","dflt":"gregorian"},"operation":{"valType":"enumerated","values":["=","<",">=",">","<=","[]","()","[)","(]","][",")(","](",")[","{}","}{"],"description":"Sets the filter operation. *=* keeps items equal to `value` *<* keeps items less than `value` *<=* keeps items less than or equal to `value` *>* keeps items greater than `value` *>=* keeps items greater than or equal to `value` *[]* keeps items inside `value[0]` to value[1]` including both bounds` *()* keeps items inside `value[0]` to value[1]` excluding both bounds` *[)* keeps items inside `value[0]` to value[1]` including `value[0]` but excluding `value[1] *(]* keeps items inside `value[0]` to value[1]` excluding `value[0]` but including `value[1] *][* keeps items outside `value[0]` to value[1]` and equal to both bounds` *)(* keeps items outside `value[0]` to value[1]` *](* keeps items outside `value[0]` to value[1]` and equal to `value[0]` *)[* keeps items outside `value[0]` to value[1]` and equal to `value[1]` *{}* keeps items present in a set of values *}{* keeps items not present in a set of values","dflt":"="},"targetsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  target ."},"targetcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use for `target`, if it is an array of dates. If `target` is a string (eg *x*) we use the corresponding trace attribute (eg `xcalendar`) if it exists, even if `targetcalendar` is provided.","dflt":"gregorian"}}},"candlestick":{"attributes":{}},"ohlc":{"attributes":{}},"groupby":{"attributes":{"style":{"valType":"any","description":"Sets each group style. For example, with `groups` set to *['a', 'b', 'a', 'b']* and `style` set to *{ a: { marker: { color: 'red' } }} marker points in group *'a'* will be drawn in red.","dflt":{}},"groupssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  groups ."},"enabled":{"valType":"boolean","description":"Determines whether this group-by transform is enabled or disabled.","dflt":true},"groups":{"valType":"data_array","role":"data","description":"Sets the groups in which the trace data will be split. For example, with `x` set to *[1, 2, 3, 4]* and `groups` set to *['a', 'b', 'a', 'b']*, the groupby transform with split in one trace with `x` [1, 3] and one trace with `x` [2, 4].","dflt":[]}}}},"frames":{"group":{"valType":"string","role":"info","description":"An identifier that specifies the group to which the frame belongs, used by animate to select a subset of frames."},"name":{"valType":"string","role":"info","description":"A label by which to identify the frame"},"data":{"valType":"data_array","role":"data","description":"A list of traces this frame modifies. The format is identical to the normal trace definition."},"datasrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  data ."},"layout":{"valType":"any","description":"Layout properties which this frame modifies. The format is identical to the normal layout definition."},"baseframe":{"valType":"string","role":"info","description":"The name of the frame into which this frame's properties are merged before applying. This is used to unify properties and avoid needing to specify the same values for the same properties in multiple frames."},"traces":{"valType":"data_array","role":"data","description":"A list of trace indices that identify the respective traces in the data attribute"},"tracessrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  traces ."}},"traces":{"mesh3d":{"attributes":{"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"color":{"valType":"color","role":"style","description":"Sets the color of the whole mesh"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"ksrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  k ."},"scene":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.","dflt":"scene"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"intensity":{"valType":"data_array","role":"data","description":"Sets the vertex intensity values, used for plotting fields on meshes"},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"contour":{"color":{"valType":"color","role":"style","description":"Sets the color of the contour lines.","dflt":"#444"},"width":{"description":"Sets the width of the contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"role":"object","show":{"valType":"boolean","role":"info","description":"Sets whether or not dynamic contours are shown on hover","dflt":false}},"flatshading":{"valType":"boolean","role":"style","description":"Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.","dflt":false},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"facecolor":{"valType":"data_array","role":"data","description":"Sets the color of each face Overrides *color* and *vertexcolor*."},"vertexcolorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  vertexcolor ."},"alphahull":{"valType":"number","role":"style","description":"Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.","dflt":-1},"facecolorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  facecolor ."},"vertexcolor":{"valType":"data_array","role":"data","description":"Sets the color of each vertex Overrides *color*."},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"zcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `z` date data.","dflt":"gregorian"},"delaunayaxis":{"values":["x","y","z"],"valType":"enumerated","role":"info","description":"Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.","dflt":"z"},"type":"mesh3d","opacity":{"description":"Sets the opacity of the surface.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"lighting":{"fresnel":{"description":"Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.","dflt":0.2,"min":0,"max":5,"role":"style","valType":"number"},"facenormalsepsilon":{"description":"Epsilon for face normals calculation avoids math issues arising from degenerate geometry.","dflt":1e-06,"min":0,"max":1,"role":"style","valType":"number"},"roughness":{"description":"Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.","dflt":0.5,"min":0,"max":1,"role":"style","valType":"number"},"specular":{"description":"Represents the level that incident rays are reflected in a single direction, causing shine.","dflt":0.05,"min":0,"max":2,"role":"style","valType":"number"},"role":"object","ambient":{"description":"Ambient light increases overall color visibility but can wash out the image.","dflt":0.8,"min":0,"max":1,"role":"style","valType":"number"},"vertexnormalsepsilon":{"description":"Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.","dflt":1e-12,"min":0,"max":1,"role":"style","valType":"number"},"diffuse":{"description":"Represents the extent that incident rays are reflected in a range of angles.","dflt":0.8,"min":0,"max":1,"role":"style","valType":"number"}},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"jsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  j ."},"isrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  i ."},"lightposition":{"y":{"description":"Numeric vector, representing the Y coordinate for each vertex.","dflt":100000,"min":-100000,"max":100000,"role":"style","valType":"number"},"x":{"description":"Numeric vector, representing the X coordinate for each vertex.","dflt":100000,"min":-100000,"max":100000,"role":"style","valType":"number"},"z":{"description":"Numeric vector, representing the Z coordinate for each vertex.","dflt":0,"min":-100000,"max":100000,"role":"style","valType":"number"},"role":"object"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"i":{"valType":"data_array","role":"data","description":"A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle."},"k":{"valType":"data_array","role":"data","description":"A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle."},"j":{"valType":"data_array","role":"data","description":"A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle."},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"intensitysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  intensity ."},"y":{"valType":"data_array","role":"data","description":"Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex."},"x":{"valType":"data_array","role":"data","description":"Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex."},"z":{"valType":"data_array","role":"data","description":"Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex."}},"meta":{"description":"Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm"}},"scatterternary":{"attributes":{"textposition":{"description":"Sets the positions of the `text` elements with respects to the (x,y) coordinates.","dflt":"middle center","role":"style","values":["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],"valType":"enumerated","arrayOk":true},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c)."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"marker":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":true},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"opacitysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  opacity ."},"maxdisplayed":{"valType":"number","role":"style","description":"Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.","dflt":0,"min":0},"role":"object","opacity":{"description":"Sets the marker opacity.","min":0,"max":1,"role":"style","valType":"number","arrayOk":true},"sizeref":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.","dflt":1},"symbol":{"description":"Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.","dflt":"circle","role":"style","values":[0,"circle",100,"circle-open",200,"circle-dot",300,"circle-open-dot",1,"square",101,"square-open",201,"square-dot",301,"square-open-dot",2,"diamond",102,"diamond-open",202,"diamond-dot",302,"diamond-open-dot",3,"cross",103,"cross-open",203,"cross-dot",303,"cross-open-dot",4,"x",104,"x-open",204,"x-dot",304,"x-open-dot",5,"triangle-up",105,"triangle-up-open",205,"triangle-up-dot",305,"triangle-up-open-dot",6,"triangle-down",106,"triangle-down-open",206,"triangle-down-dot",306,"triangle-down-open-dot",7,"triangle-left",107,"triangle-left-open",207,"triangle-left-dot",307,"triangle-left-open-dot",8,"triangle-right",108,"triangle-right-open",208,"triangle-right-dot",308,"triangle-right-open-dot",9,"triangle-ne",109,"triangle-ne-open",209,"triangle-ne-dot",309,"triangle-ne-open-dot",10,"triangle-se",110,"triangle-se-open",210,"triangle-se-dot",310,"triangle-se-open-dot",11,"triangle-sw",111,"triangle-sw-open",211,"triangle-sw-dot",311,"triangle-sw-open-dot",12,"triangle-nw",112,"triangle-nw-open",212,"triangle-nw-dot",312,"triangle-nw-open-dot",13,"pentagon",113,"pentagon-open",213,"pentagon-dot",313,"pentagon-open-dot",14,"hexagon",114,"hexagon-open",214,"hexagon-dot",314,"hexagon-open-dot",15,"hexagon2",115,"hexagon2-open",215,"hexagon2-dot",315,"hexagon2-open-dot",16,"octagon",116,"octagon-open",216,"octagon-dot",316,"octagon-open-dot",17,"star",117,"star-open",217,"star-dot",317,"star-open-dot",18,"hexagram",118,"hexagram-open",218,"hexagram-dot",318,"hexagram-open-dot",19,"star-triangle-up",119,"star-triangle-up-open",219,"star-triangle-up-dot",319,"star-triangle-up-open-dot",20,"star-triangle-down",120,"star-triangle-down-open",220,"star-triangle-down-dot",320,"star-triangle-down-open-dot",21,"star-square",121,"star-square-open",221,"star-square-dot",321,"star-square-open-dot",22,"star-diamond",122,"star-diamond-open",222,"star-diamond-dot",322,"star-diamond-open-dot",23,"diamond-tall",123,"diamond-tall-open",223,"diamond-tall-dot",323,"diamond-tall-open-dot",24,"diamond-wide",124,"diamond-wide-open",224,"diamond-wide-dot",324,"diamond-wide-open-dot",25,"hourglass",125,"hourglass-open",26,"bowtie",126,"bowtie-open",27,"circle-cross",127,"circle-cross-open",28,"circle-x",128,"circle-x-open",29,"square-cross",129,"square-cross-open",30,"square-x",130,"square-x-open",31,"diamond-cross",131,"diamond-cross-open",32,"diamond-x",132,"diamond-x-open",33,"cross-thin",133,"cross-thin-open",34,"x-thin",134,"x-thin-open",35,"asterisk",135,"asterisk-open",36,"hash",136,"hash-open",236,"hash-dot",336,"hash-open-dot",37,"y-up",137,"y-up-open",38,"y-down",138,"y-down-open",39,"y-left",139,"y-left-open",40,"y-right",140,"y-right-open",41,"line-ew",141,"line-ew-open",42,"line-ns",142,"line-ns-open",43,"line-ne",143,"line-ne-open",44,"line-nw",144,"line-nw-open"],"valType":"enumerated","arrayOk":true},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `.color` array index, and if set, `.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `.cmin` and `.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the  color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"valType":"number","description":"Sets the width (in px) of the lines bounding the marker points.","role":"style","arrayOk":true,"min":0},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `.color` array index, and if set, `.cmin` must be set as well.","dflt":null}},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"sizemode":{"role":"info","valType":"enumerated","values":["diameter","area"],"description":"Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.","dflt":"diameter"},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"sizemin":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.","dflt":0,"min":0}},"hoveron":{"role":"info","valType":"flaglist","flags":["points","fills"],"description":"Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*."},"fill":{"role":"style","valType":"enumerated","values":["none","toself","tonext"],"description":"Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.","dflt":"none"},"asrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  a ."},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"sum":{"valType":"number","role":"info","description":"The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum","dflt":0,"min":0},"subplot":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.","dflt":"ternary"},"type":"scatterternary","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the text font.","family":{"strict":true,"valType":"string","role":"style","arrayOk":true,"noBlank":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"textpositionsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  textposition ."},"bsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  b ."},"csrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  c ."},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["a","b","c","text","name"],"role":"info","valType":"flaglist"},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color."},"smoothing":{"description":"Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).","dflt":1,"min":0,"max":1.3,"role":"style","valType":"number"},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"shape":{"role":"style","valType":"enumerated","values":["linear","spline"],"description":"Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.","dflt":"linear"},"role":"object"},"a":{"valType":"data_array","role":"data","description":"Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`."},"c":{"valType":"data_array","role":"data","description":"Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`."},"b":{"valType":"data_array","role":"data","description":"Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`."},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.","dflt":false},"mode":{"description":"Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.","dflt":"markers","extras":["none"],"role":"info","flags":["lines","markers","text"],"valType":"flaglist"}},"meta":{"hrName":"scatter_ternary","description":"Provides similar functionality to the *scatter* type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets."}},"surface":{"attributes":{"cmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"text":{"valType":"data_array","role":"data","description":"Sets the text elements associated with each z value."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"scene":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.","dflt":"scene"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"surfacecolorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  surfacecolor ."},"uid":{"valType":"string","role":"info","dflt":""},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"surfacecolor":{"valType":"data_array","role":"data","description":"Sets the surface color values, used for setting a color scale independent of `z`."},"zcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `z` date data.","dflt":"gregorian"},"contours":{"y":{"show":{"valType":"boolean","role":"info","description":"Determines whether or not contour lines about the y dimension are drawn.","dflt":false},"color":{"valType":"color","role":"style","description":"Sets the color of the contour lines.","dflt":"#444"},"highlightwidth":{"description":"Sets the width of the highlighted contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"project":{"y":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"x":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"z":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"role":"object"},"width":{"description":"Sets the width of the contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"highlightcolor":{"valType":"color","role":"style","description":"Sets the color of the highlighted contour lines.","dflt":"#444"},"role":"object","highlight":{"valType":"boolean","role":"info","description":"Determines whether or not contour lines about the y dimension are highlighted on hover.","dflt":true},"usecolormap":{"valType":"boolean","role":"info","description":"An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.","dflt":false}},"x":{"show":{"valType":"boolean","role":"info","description":"Determines whether or not contour lines about the x dimension are drawn.","dflt":false},"color":{"valType":"color","role":"style","description":"Sets the color of the contour lines.","dflt":"#444"},"highlightwidth":{"description":"Sets the width of the highlighted contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"project":{"y":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"x":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"z":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"role":"object"},"width":{"description":"Sets the width of the contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"highlightcolor":{"valType":"color","role":"style","description":"Sets the color of the highlighted contour lines.","dflt":"#444"},"role":"object","highlight":{"valType":"boolean","role":"info","description":"Determines whether or not contour lines about the x dimension are highlighted on hover.","dflt":true},"usecolormap":{"valType":"boolean","role":"info","description":"An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.","dflt":false}},"z":{"show":{"valType":"boolean","role":"info","description":"Determines whether or not contour lines about the z dimension are drawn.","dflt":false},"color":{"valType":"color","role":"style","description":"Sets the color of the contour lines.","dflt":"#444"},"highlightwidth":{"description":"Sets the width of the highlighted contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"project":{"y":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"x":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"z":{"valType":"boolean","role":"info","description":"Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.","dflt":false},"role":"object"},"width":{"description":"Sets the width of the contour lines.","dflt":2,"min":1,"max":16,"role":"style","valType":"number"},"highlightcolor":{"valType":"color","role":"style","description":"Sets the color of the highlighted contour lines.","dflt":"#444"},"role":"object","highlight":{"valType":"boolean","role":"info","description":"Determines whether or not contour lines about the z dimension are highlighted on hover.","dflt":true},"usecolormap":{"valType":"boolean","role":"info","description":"An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.","dflt":false}},"role":"object"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"surface","_deprecated":{"zmin":{"valType":"number","role":"info","description":"Obsolete. Use `cmin` instead.","dflt":null},"zmax":{"valType":"number","role":"info","description":"Obsolete. Use `cmax` instead.","dflt":null},"zauto":{"valType":"boolean","role":"info","description":"Obsolete. Use `cauto` instead.","dflt":true}},"opacity":{"description":"Sets the opacity of the surface.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"hidesurface":{"valType":"boolean","role":"info","description":"Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":false},"lighting":{"fresnel":{"description":"Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.","dflt":0.2,"min":0,"max":5,"role":"style","valType":"number"},"roughness":{"description":"Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.","dflt":0.5,"min":0,"max":1,"role":"style","valType":"number"},"specular":{"description":"Represents the level that incident rays are reflected in a single direction, causing shine.","dflt":0.05,"min":0,"max":2,"role":"style","valType":"number"},"role":"object","ambient":{"description":"Ambient light increases overall color visibility but can wash out the image.","dflt":0.8,"min":0,"max":1,"role":"style","valType":"number"},"diffuse":{"description":"Represents the extent that incident rays are reflected in a range of angles.","dflt":0.8,"min":0,"max":1,"role":"style","valType":"number"}},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"lightposition":{"y":{"description":"Numeric vector, representing the Y coordinate for each vertex.","dflt":10000,"min":-100000,"max":100000,"role":"style","valType":"number"},"x":{"description":"Numeric vector, representing the X coordinate for each vertex.","dflt":10,"min":-100000,"max":100000,"role":"style","valType":"number"},"z":{"description":"Numeric vector, representing the Z coordinate for each vertex.","dflt":0,"min":-100000,"max":100000,"role":"style","valType":"number"},"role":"object"},"z":{"valType":"data_array","role":"data","description":"Sets the z coordinates."},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"cauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."},"cmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null}},"meta":{"description":"The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a {2D array}, where its bounds can be controlled using `cmin` and `cmax`."}},"contour":{"attributes":{"zmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null},"xtype":{"role":"info","valType":"enumerated","values":["array","scaled"],"description":"If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"text":{"valType":"data_array","role":"data","description":"Sets the text elements associated with each z value."},"zmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"y0":{"valType":"any","role":"info","description":"Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.","dflt":0},"line":{"color":{"valType":"color","role":"style","description":"Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*."},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object","smoothing":{"description":"Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.","dflt":1,"min":0,"max":1.3,"role":"style","valType":"number"}},"uid":{"valType":"string","role":"info","dflt":""},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"ncontours":{"valType":"integer","role":"style","description":"Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.","dflt":15,"min":1},"ytype":{"role":"info","valType":"enumerated","values":["array","scaled"],"description":"If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"},"contours":{"coloring":{"role":"style","valType":"enumerated","values":["fill","heatmap","lines","none"],"description":"Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.","dflt":"fill"},"end":{"valType":"number","role":"style","description":"Sets the end contour level value. Must be more than `contours.start`","dflt":null},"showlines":{"valType":"boolean","role":"style","description":"Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.","dflt":true},"start":{"valType":"number","role":"style","description":"Sets the starting contour level value. Must be less than `contours.end`","dflt":null},"role":"object","size":{"valType":"number","role":"style","description":"Sets the step between each contour level. Must be positive.","dflt":null,"min":0}},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"contour","ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"autocontour":{"valType":"boolean","role":"style","description":"Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.","dflt":true},"transpose":{"valType":"boolean","role":"info","description":"Transposes the z data.","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":false},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"dx":{"valType":"number","role":"info","description":"Sets the x coordinate step. See `x0` for more info.","dflt":1},"dy":{"valType":"number","role":"info","description":"Sets the y coordinate step. See `y0` for more info.","dflt":1},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"x0":{"valType":"any","role":"info","description":"Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.","dflt":0},"zauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.","dflt":false},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."},"z":{"valType":"data_array","role":"data","description":"Sets the z data."}},"meta":{"description":"The data from which contour lines are computed is set in `z`. Data in `z` must be a {2D array} of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to *true*, the above behavior is flipped."}},"area":{"attributes":{"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"rsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  r ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"r":{"valType":"data_array","role":"data","description":"For polar chart only.Sets the radial coordinates."},"t":{"valType":"data_array","role":"data","description":"For polar chart only.Sets the angular coordinates."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"marker":{"opacity":{"description":"Sets the marker opacity.","min":0,"max":1,"role":"style","valType":"number","arrayOk":true},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"opacitysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  opacity ."},"symbol":{"description":"Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.","dflt":"circle","role":"style","values":[0,"circle",100,"circle-open",200,"circle-dot",300,"circle-open-dot",1,"square",101,"square-open",201,"square-dot",301,"square-open-dot",2,"diamond",102,"diamond-open",202,"diamond-dot",302,"diamond-open-dot",3,"cross",103,"cross-open",203,"cross-dot",303,"cross-open-dot",4,"x",104,"x-open",204,"x-dot",304,"x-open-dot",5,"triangle-up",105,"triangle-up-open",205,"triangle-up-dot",305,"triangle-up-open-dot",6,"triangle-down",106,"triangle-down-open",206,"triangle-down-dot",306,"triangle-down-open-dot",7,"triangle-left",107,"triangle-left-open",207,"triangle-left-dot",307,"triangle-left-open-dot",8,"triangle-right",108,"triangle-right-open",208,"triangle-right-dot",308,"triangle-right-open-dot",9,"triangle-ne",109,"triangle-ne-open",209,"triangle-ne-dot",309,"triangle-ne-open-dot",10,"triangle-se",110,"triangle-se-open",210,"triangle-se-dot",310,"triangle-se-open-dot",11,"triangle-sw",111,"triangle-sw-open",211,"triangle-sw-dot",311,"triangle-sw-open-dot",12,"triangle-nw",112,"triangle-nw-open",212,"triangle-nw-dot",312,"triangle-nw-open-dot",13,"pentagon",113,"pentagon-open",213,"pentagon-dot",313,"pentagon-open-dot",14,"hexagon",114,"hexagon-open",214,"hexagon-dot",314,"hexagon-open-dot",15,"hexagon2",115,"hexagon2-open",215,"hexagon2-dot",315,"hexagon2-open-dot",16,"octagon",116,"octagon-open",216,"octagon-dot",316,"octagon-open-dot",17,"star",117,"star-open",217,"star-dot",317,"star-open-dot",18,"hexagram",118,"hexagram-open",218,"hexagram-dot",318,"hexagram-open-dot",19,"star-triangle-up",119,"star-triangle-up-open",219,"star-triangle-up-dot",319,"star-triangle-up-open-dot",20,"star-triangle-down",120,"star-triangle-down-open",220,"star-triangle-down-dot",320,"star-triangle-down-open-dot",21,"star-square",121,"star-square-open",221,"star-square-dot",321,"star-square-open-dot",22,"star-diamond",122,"star-diamond-open",222,"star-diamond-dot",322,"star-diamond-open-dot",23,"diamond-tall",123,"diamond-tall-open",223,"diamond-tall-dot",323,"diamond-tall-open-dot",24,"diamond-wide",124,"diamond-wide-open",224,"diamond-wide-dot",324,"diamond-wide-open-dot",25,"hourglass",125,"hourglass-open",26,"bowtie",126,"bowtie-open",27,"circle-cross",127,"circle-cross-open",28,"circle-x",128,"circle-x-open",29,"square-cross",129,"square-cross-open",30,"square-x",130,"square-x-open",31,"diamond-cross",131,"diamond-cross-open",32,"diamond-x",132,"diamond-x-open",33,"cross-thin",133,"cross-thin-open",34,"x-thin",134,"x-thin-open",35,"asterisk",135,"asterisk-open",36,"hash",136,"hash-open",236,"hash-dot",336,"hash-open-dot",37,"y-up",137,"y-up-open",38,"y-down",138,"y-down-open",39,"y-left",139,"y-left-open",40,"y-right",140,"y-right-open",41,"line-ew",141,"line-ew-open",42,"line-ns",142,"line-ns-open",43,"line-ne",143,"line-ne-open",44,"line-nw",144,"line-nw-open"],"valType":"enumerated","arrayOk":true},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":true}},"tsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  t ."},"type":"area","uid":{"valType":"string","role":"info","dflt":""}},"meta":{}},"ohlc":{"attributes":{"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points."},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"high":{"valType":"data_array","role":"data","description":"Sets the high values.","dflt":[]},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"close":{"valType":"data_array","role":"data","description":"Sets the close values.","dflt":[]},"open":{"valType":"data_array","role":"data","description":"Sets the open values.","dflt":[]},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"opensrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  open ."},"low":{"valType":"data_array","role":"data","description":"Sets the low values.","dflt":[]},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"highsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  high ."},"increasing":{"role":"object","showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this segment is shown in the legend.","dflt":true},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color.","dflt":"#3D9970"},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object"},"name":{"valType":"string","role":"info","description":"Sets the segment name. The segment name appear as the legend item and on hover."}},"type":"ohlc","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"line":{"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"[object Object] Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.","dflt":"solid"},"width":{"valType":"number","role":"style","description":"[object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.","dflt":2,"min":0},"role":"object"},"tickwidth":{"description":"Sets the width of the open/close tick marks relative to the *x* minimal interval.","dflt":0.3,"min":0,"max":0.5,"role":"style","valType":"number"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"lowsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  low ."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"decreasing":{"role":"object","showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this segment is shown in the legend.","dflt":true},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color.","dflt":"#FF4136"},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object"},"name":{"valType":"string","role":"info","description":"Sets the segment name. The segment name appear as the legend item and on hover."}},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates. If absent, linear coordinate will be generated."},"closesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  close ."}},"meta":{"description":"The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red."}},"heatmap":{"attributes":{"zmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null},"xtype":{"role":"info","valType":"enumerated","values":["array","scaled"],"description":"If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"text":{"valType":"data_array","role":"data","description":"Sets the text elements associated with each z value."},"zmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"y0":{"valType":"any","role":"info","description":"Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.","dflt":0},"uid":{"valType":"string","role":"info","dflt":""},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"ytype":{"role":"info","valType":"enumerated","values":["array","scaled"],"description":"If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"ygap":{"valType":"number","role":"style","description":"Sets the vertical gap (in pixels) between bricks.","dflt":0,"min":0},"type":"heatmap","ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"zsmooth":{"role":"style","valType":"enumerated","values":["fast","best",false],"description":"Picks a smoothing algorithm use to smooth `z` data.","dflt":false},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"transpose":{"valType":"boolean","role":"info","description":"Transposes the z data.","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":false},"xgap":{"valType":"number","role":"style","description":"Sets the horizontal gap (in pixels) between bricks.","dflt":0,"min":0},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"dx":{"valType":"number","role":"info","description":"Sets the x coordinate step. See `x0` for more info.","dflt":1},"dy":{"valType":"number","role":"info","description":"Sets the y coordinate step. See `y0` for more info.","dflt":1},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"x0":{"valType":"any","role":"info","description":"Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.","dflt":0},"zauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.","dflt":false},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."},"z":{"valType":"data_array","role":"data","description":"Sets the z data."}},"meta":{"description":"The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets."}},"scattermapbox":{"attributes":{"textposition":{"description":"Sets the positions of the `text` elements with respects to the (x,y) coordinates.","dflt":"middle center","role":"style","values":["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],"valType":"enumerated","arrayOk":false},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"marker":{"opacity":{"description":"Sets the marker opacity.","min":0,"max":1,"role":"style","valType":"number","arrayOk":false},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"sizeref":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.","dflt":1},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"symbol":{"valType":"string","role":"style","arrayOk":true,"dflt":"circle","description":"Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols."},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"sizemode":{"role":"info","valType":"enumerated","values":["diameter","area"],"description":"Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.","dflt":"diameter"},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"sizemin":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.","dflt":0,"min":0},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":true}},"fill":{"role":"style","valType":"enumerated","values":["none","toself"],"description":"Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.","dflt":"none"},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"lon":{"valType":"data_array","role":"data","description":"Sets the longitude coordinates (in degrees East)."},"type":"scattermapbox","lonsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  lon ."},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the icon text font. Has an effect only when `type` is set to *symbol*.","family":{"description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","dflt":"Open Sans Regular, Arial Unicode MS Regular","noBlank":true,"strict":true,"role":"style","valType":"string"},"size":{"valType":"number","role":"style","min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["lon","lat","text","name","name"],"role":"info","valType":"flaglist"},"lat":{"valType":"data_array","role":"data","description":"Sets the latitude coordinates (in degrees North)."},"latsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  lat ."},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color."},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object"},"subplot":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.","dflt":"mapbox"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.","dflt":false},"mode":{"description":"Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.","dflt":"markers","extras":["none"],"role":"info","flags":["lines","markers","text"],"valType":"flaglist"}},"meta":{"hrName":"scatter_mapbox","description":"The data visualized as scatter point, lines or marker symbols on a Mapbox GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`."}},"scatter3d":{"attributes":{"textposition":{"description":"Sets the positions of the `text` elements with respects to the (x,y) coordinates.","dflt":"top center","role":"style","values":["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],"valType":"enumerated","arrayOk":true},"projection":{"y":{"opacity":{"description":"Sets the projection color.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"scale":{"description":"Sets the scale factor determining the size of the projection marker points.","dflt":0.6666666666666666,"min":0,"max":10,"role":"style","valType":"number"},"role":"object","show":{"valType":"boolean","role":"info","description":"Sets whether or not projections are shown along the y axis.","dflt":false}},"x":{"opacity":{"description":"Sets the projection color.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"scale":{"description":"Sets the scale factor determining the size of the projection marker points.","dflt":0.6666666666666666,"min":0,"max":10,"role":"style","valType":"number"},"role":"object","show":{"valType":"boolean","role":"info","description":"Sets whether or not projections are shown along the x axis.","dflt":false}},"z":{"opacity":{"description":"Sets the projection color.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"scale":{"description":"Sets the scale factor determining the size of the projection marker points.","dflt":0.6666666666666666,"min":0,"max":10,"role":"style","valType":"number"},"role":"object","show":{"valType":"boolean","role":"info","description":"Sets whether or not projections are shown along the z axis.","dflt":false}},"role":"object"},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"scene":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.","dflt":"scene"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"marker":{"opacity":{"description":"Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.","min":0,"max":1,"role":"style","valType":"number","arrayOk":false},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"sizeref":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.","dflt":1},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"symbol":{"description":"Sets the marker symbol type.","dflt":"circle","role":"style","values":["circle","circle-open","square","square-open","diamond","diamond-open","cross","x"],"valType":"enumerated","arrayOk":true},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"sizemode":{"role":"info","valType":"enumerated","values":["diameter","area"],"description":"Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.","dflt":"diameter"},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"valType":"number","description":"Sets the width (in px) of the lines bounding the marker points.","role":"style","arrayOk":false,"min":0},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.","dflt":null}},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"sizemin":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.","dflt":0,"min":0},"size":{"description":"Sets the marker size (in px).","dflt":8,"min":0,"role":"style","valType":"number","arrayOk":true}},"uid":{"valType":"string","role":"info","dflt":""},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"error_x":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"error_y":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"error_z":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"surfacecolor":{"valType":"color","role":"style","description":"Sets the surface fill color."},"zcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `z` date data.","dflt":"gregorian"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"scatter3d","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the text font.","family":{"strict":true,"valType":"string","role":"style","arrayOk":true,"noBlank":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"textpositionsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  textposition ."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"line":{"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `line.color` array index, and if set, `line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `line.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `line.color` array index, and if set, `line.cmin` must be set as well.","dflt":null},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."}},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.","dflt":false},"mode":{"description":"Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.","dflt":"lines+markers","extras":["none"],"role":"info","flags":["lines","markers","text"],"valType":"flaglist"},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"surfaceaxis":{"values":[-1,0,1,2],"valType":"enumerated","role":"info","description":"If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.","dflt":-1},"z":{"valType":"data_array","role":"data","description":"Sets the z coordinates."}},"meta":{"hrName":"scatter_3d","description":"The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`."}},"pointcloud":{"attributes":{"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xy":{"valType":"data_array","role":"data","description":"Faster alternative to specifying `x` and `y` separately. If supplied, it must be a typed `Float32Array` array that represents points such that `xy[i * 2] = x[i]` and `xy[i * 2 + 1] = y[i]`"},"marker":{"opacity":{"description":"Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.","dflt":1,"min":0,"max":1,"role":"style","valType":"number","arrayOk":false},"sizemax":{"valType":"number","role":"style","description":"Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.","dflt":20,"min":0.1},"color":{"valType":"color","role":"style","arrayOk":false,"description":"Sets the marker fill color. It accepts a specific color.If the color is not fully opaque and there are hundreds of thousandsof points, it may cause slower zooming and panning."},"blend":{"valType":"boolean","role":"style","description":"Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.","dflt":null},"role":"object","border":{"color":{"valType":"color","role":"style","arrayOk":false,"description":"Sets the stroke color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning."},"arearatio":{"description":"Specifies what fraction of the marker area is covered with the border.","dflt":0,"min":0,"max":1,"role":"style","valType":"number"},"role":"object"},"sizemin":{"description":"Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.","dflt":0.5,"min":0.1,"max":2,"role":"style","valType":"number"}},"xboundssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  xbounds ."},"indicessrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  indices ."},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"xbounds":{"valType":"data_array","role":"data","description":"Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits."},"ybounds":{"valType":"data_array","role":"data","description":"Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"xysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  xy ."},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."},"type":"pointcloud","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"yboundssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ybounds ."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"indices":{"valType":"data_array","role":"data","description":"A sequential value, 0..n, supply it to avoid creating this array inside plotting. If specified, it must be a typed `Int32Array` array. Its length must be equal to or greater than the number of points. For the best performance and memory use, create one large `indices` typed array that is guaranteed to be at least as long as the largest number of points during use, and reuse it on each `Plotly.restyle()` call."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."}},"meta":{"description":"The data visualized as a point cloud set in `x` and `y` using the WebGl plotting engine."}},"scattergl":{"attributes":{"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"marker":{"opacity":{"description":"Sets the marker opacity.","min":0,"max":1,"role":"style","valType":"number","arrayOk":true},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"opacitysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  opacity ."},"symbol":{"description":"Sets the marker symbol type.","dflt":"circle","role":"style","values":["circle","circle-open","square","square-open","diamond","diamond-open","cross","x"],"valType":"enumerated","arrayOk":true},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"sizemode":{"role":"info","valType":"enumerated","values":["diameter","area"],"description":"Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.","dflt":"diameter"},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"sizeref":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.","dflt":1},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"valType":"number","description":"Sets the width (in px) of the lines bounding the marker points.","role":"style","arrayOk":true,"min":0},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.","dflt":null}},"sizemin":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.","dflt":0,"min":0},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":true}},"y0":{"valType":"any","role":"info","description":"Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.","dflt":0},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color."},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"enumerated","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines.","dflt":"solid"},"role":"object"},"fill":{"role":"style","valType":"enumerated","values":["none","tozeroy","tozerox"],"description":"Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.","dflt":"none"},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"error_x":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"error_y":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"scattergl","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."},"dx":{"valType":"number","role":"info","description":"Sets the x coordinate step. See `x0` for more info.","dflt":1},"dy":{"valType":"number","role":"info","description":"Sets the y coordinate step. See `y0` for more info.","dflt":1},"x0":{"valType":"any","role":"info","description":"Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.","dflt":0},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.","dflt":false},"mode":{"role":"info","valType":"flaglist","extras":["none"],"flags":["lines","markers"],"description":"Determines the drawing mode for this scatter trace."},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."}},"meta":{"description":"The data visualized as scatter point or lines is set in `x` and `y` using the WebGl plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays."}},"histogram":{"attributes":{"orientation":{"values":["v","h"],"valType":"enumerated","role":"info","description":"Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal)."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"marker":{"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"description":"Sets the width (in px) of the lines bounding the marker points.","dflt":0,"min":0,"role":"style","valType":"number","arrayOk":true},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.","dflt":null}},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."}},"uid":{"valType":"string","role":"info","dflt":""},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"error_x":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"error_y":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"histogram","_deprecated":{"bardir":{"values":["v","h"],"valType":"enumerated","role":"info","description":"Renamed to `orientation`."}},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"nbinsx":{"valType":"integer","role":"style","description":"Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.","dflt":0,"min":0},"nbinsy":{"valType":"integer","role":"style","description":"Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.","dflt":0,"min":0},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"histfunc":{"role":"style","valType":"enumerated","values":["count","sum","avg","min","max"],"description":"Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.","dflt":"count"},"xbins":{"start":{"valType":"any","role":"style","description":"Sets the starting value for the x axis bins.","dflt":null},"role":"object","end":{"valType":"any","role":"style","description":"Sets the end value for the x axis bins.","dflt":null},"size":{"valType":"any","role":"style","description":"Sets the step in-between value each x axis bin.","dflt":null}},"ybins":{"start":{"valType":"any","role":"style","description":"Sets the starting value for the y axis bins.","dflt":null},"role":"object","end":{"valType":"any","role":"style","description":"Sets the end value for the y axis bins.","dflt":null},"size":{"valType":"any","role":"style","description":"Sets the step in-between value each y axis bin.","dflt":null}},"autobiny":{"valType":"boolean","role":"style","description":"Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.","dflt":null},"autobinx":{"valType":"boolean","role":"style","description":"Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.","dflt":null},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"histnorm":{"role":"style","valType":"enumerated","values":["","percent","probability","density","probability density"],"description":"Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1).","dflt":""},"y":{"valType":"data_array","role":"data","description":"Sets the sample data to be binned on the y axis."},"x":{"valType":"data_array","role":"data","description":"Sets the sample data to be binned on the x axis."}},"meta":{"description":"The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided."},"layoutAttributes":{"barmode":{"role":"info","valType":"enumerated","values":["stack","group","overlay","relative"],"description":"Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.","dflt":"group"},"barnorm":{"role":"info","valType":"enumerated","values":["","fraction","percent"],"description":"Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents.","dflt":""},"bargap":{"max":1,"valType":"number","role":"style","description":"Sets the gap (in plot fraction) between bars of adjacent location coordinates.","min":0},"bargroupgap":{"description":"Sets the gap (in plot fraction) between bars of the same location coordinate.","dflt":0,"min":0,"max":1,"role":"style","valType":"number"}}},"pie":{"attributes":{"labelssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  labels ."},"textposition":{"description":"Specifies the location of the `textinfo`.","dflt":"auto","values":["inside","outside","auto","none"],"role":"info","valType":"enumerated","arrayOk":true},"domain":{"y":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the vertical domain of this pie trace (in plot fraction).","dflt":[0,1]},"x":{"items":[{"max":1,"valType":"number","min":0},{"max":1,"valType":"number","min":0}],"valType":"info_array","role":"info","description":"Sets the horizontal domain of this pie trace (in plot fraction).","dflt":[0,1]},"role":"object"},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"data_array","role":"data","description":"Sets text elements associated with each sector."},"labels":{"valType":"data_array","role":"data","description":"Sets the sector labels."},"direction":{"role":"style","valType":"enumerated","values":["clockwise","counterclockwise"],"description":"Specifies the direction at which succeeding sectors follow one another.","dflt":"counterclockwise"},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"pullsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  pull ."},"marker":{"colors":{"valType":"data_array","role":"data","description":"Sets the color of each sector of this pie chart. If not specified, the default trace color set is used to pick the sector colors."},"role":"object","line":{"color":{"valType":"color","role":"style","arrayOk":true,"dflt":"#444","description":"Sets the color of the line enclosing each sector."},"width":{"description":"Sets the width (in px) of the line enclosing each sector.","dflt":0,"min":0,"role":"style","valType":"number","arrayOk":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."}},"colorssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  colors ."}},"textinfo":{"flags":["label","text","value","percent"],"valType":"flaglist","extras":["none"],"role":"info","description":"Determines which trace information appear on the graph."},"rotation":{"description":"Instead of the first slice starting at 12 o'clock, rotate to some other angle.","dflt":0,"min":-360,"max":360,"role":"style","valType":"number"},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"outsidetextfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font used for `textinfo` lying outside the pie.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"type":"pie","valuessrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  values ."},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font used for `textinfo`.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"label0":{"valType":"number","role":"info","description":"Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.","dflt":0},"textpositionsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  textposition ."},"sort":{"valType":"boolean","role":"style","description":"Determines whether or not the sectors of reordered from largest to smallest.","dflt":true},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["label","text","value","percent","name"],"role":"info","valType":"flaglist"},"dlabel":{"valType":"number","role":"info","description":"Sets the label step. See `label0` for more info.","dflt":1},"hole":{"description":"Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.","dflt":0,"min":0,"max":1,"role":"style","valType":"number"},"pull":{"description":"Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.","dflt":0,"min":0,"max":1,"role":"style","valType":"number","arrayOk":true},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"insidetextfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the font used for `textinfo` lying inside the pie.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"values":{"valType":"data_array","role":"data","description":"Sets the values of the sectors of this pie chart."},"scalegroup":{"valType":"string","role":"info","description":"If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.","dflt":""}},"meta":{"description":"A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`"},"layoutAttributes":{"hiddenlabelssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  hiddenlabels ."},"hiddenlabels":{"valType":"data_array","role":"data"}}},"heatmapgl":{"attributes":{"zmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null},"xtype":{"role":"info","valType":"enumerated","values":["array","scaled"],"description":"If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"text":{"valType":"data_array","role":"data","description":"Sets the text elements associated with each z value."},"zmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"y0":{"valType":"any","role":"info","description":"Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.","dflt":0},"uid":{"valType":"string","role":"info","dflt":""},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"ytype":{"role":"info","valType":"enumerated","values":["array","scaled"],"description":"If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"heatmapgl","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"transpose":{"valType":"boolean","role":"info","description":"Transposes the z data.","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":false},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"dx":{"valType":"number","role":"info","description":"Sets the x coordinate step. See `x0` for more info.","dflt":1},"dy":{"valType":"number","role":"info","description":"Sets the y coordinate step. See `y0` for more info.","dflt":1},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"x0":{"valType":"any","role":"info","description":"Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.","dflt":0},"zauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."},"z":{"valType":"data_array","role":"data","description":"Sets the z data."}},"meta":{"description":"WebGL version of the heatmap trace type."}},"histogram2d":{"attributes":{"zmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"zmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"marker":{"color":{"valType":"data_array","role":"data","description":"Sets the aggregation data."},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"role":"object"},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"zauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ygap":{"valType":"number","role":"style","description":"Sets the vertical gap (in pixels) between bricks.","dflt":0,"min":0},"type":"histogram2d","ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"zsmooth":{"role":"style","valType":"enumerated","values":["fast","best",false],"description":"Picks a smoothing algorithm use to smooth `z` data.","dflt":false},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":false},"xgap":{"valType":"number","role":"style","description":"Sets the horizontal gap (in pixels) between bricks.","dflt":0,"min":0},"nbinsx":{"valType":"integer","role":"style","description":"Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.","dflt":0,"min":0},"nbinsy":{"valType":"integer","role":"style","description":"Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.","dflt":0,"min":0},"histfunc":{"role":"style","valType":"enumerated","values":["count","sum","avg","min","max"],"description":"Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.","dflt":"count"},"xbins":{"start":{"valType":"any","role":"style","description":"Sets the starting value for the x axis bins.","dflt":null},"role":"object","end":{"valType":"any","role":"style","description":"Sets the end value for the x axis bins.","dflt":null},"size":{"valType":"any","role":"style","description":"Sets the step in-between value each x axis bin.","dflt":null}},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"ybins":{"start":{"valType":"any","role":"style","description":"Sets the starting value for the y axis bins.","dflt":null},"role":"object","end":{"valType":"any","role":"style","description":"Sets the end value for the y axis bins.","dflt":null},"size":{"valType":"any","role":"style","description":"Sets the step in-between value each y axis bin.","dflt":null}},"autobiny":{"valType":"boolean","role":"style","description":"Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.","dflt":null},"autobinx":{"valType":"boolean","role":"style","description":"Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.","dflt":null},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"histnorm":{"role":"style","valType":"enumerated","values":["","percent","probability","density","probability density"],"description":"Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1).","dflt":""},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"y":{"valType":"data_array","role":"data","description":"Sets the sample data to be binned on the y axis."},"x":{"valType":"data_array","role":"data","description":"Sets the sample data to be binned on the x axis."},"z":{"valType":"data_array","role":"data","description":"Sets the aggregation data."}},"meta":{"hrName":"histogram_2d","description":"The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap."}},"scattergeo":{"attributes":{"textposition":{"description":"Sets the positions of the `text` elements with respects to the (x,y) coordinates.","dflt":"middle center","role":"style","values":["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],"valType":"enumerated","arrayOk":true},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates."},"locations":{"valType":"data_array","role":"data","description":"Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"marker":{"opacity":{"description":"Sets the marker opacity.","min":0,"max":1,"role":"style","valType":"number","arrayOk":true},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"sizeref":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.","dflt":1},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"opacitysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  opacity ."},"symbol":{"description":"Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.","dflt":"circle","role":"style","values":[0,"circle",100,"circle-open",200,"circle-dot",300,"circle-open-dot",1,"square",101,"square-open",201,"square-dot",301,"square-open-dot",2,"diamond",102,"diamond-open",202,"diamond-dot",302,"diamond-open-dot",3,"cross",103,"cross-open",203,"cross-dot",303,"cross-open-dot",4,"x",104,"x-open",204,"x-dot",304,"x-open-dot",5,"triangle-up",105,"triangle-up-open",205,"triangle-up-dot",305,"triangle-up-open-dot",6,"triangle-down",106,"triangle-down-open",206,"triangle-down-dot",306,"triangle-down-open-dot",7,"triangle-left",107,"triangle-left-open",207,"triangle-left-dot",307,"triangle-left-open-dot",8,"triangle-right",108,"triangle-right-open",208,"triangle-right-dot",308,"triangle-right-open-dot",9,"triangle-ne",109,"triangle-ne-open",209,"triangle-ne-dot",309,"triangle-ne-open-dot",10,"triangle-se",110,"triangle-se-open",210,"triangle-se-dot",310,"triangle-se-open-dot",11,"triangle-sw",111,"triangle-sw-open",211,"triangle-sw-dot",311,"triangle-sw-open-dot",12,"triangle-nw",112,"triangle-nw-open",212,"triangle-nw-dot",312,"triangle-nw-open-dot",13,"pentagon",113,"pentagon-open",213,"pentagon-dot",313,"pentagon-open-dot",14,"hexagon",114,"hexagon-open",214,"hexagon-dot",314,"hexagon-open-dot",15,"hexagon2",115,"hexagon2-open",215,"hexagon2-dot",315,"hexagon2-open-dot",16,"octagon",116,"octagon-open",216,"octagon-dot",316,"octagon-open-dot",17,"star",117,"star-open",217,"star-dot",317,"star-open-dot",18,"hexagram",118,"hexagram-open",218,"hexagram-dot",318,"hexagram-open-dot",19,"star-triangle-up",119,"star-triangle-up-open",219,"star-triangle-up-dot",319,"star-triangle-up-open-dot",20,"star-triangle-down",120,"star-triangle-down-open",220,"star-triangle-down-dot",320,"star-triangle-down-open-dot",21,"star-square",121,"star-square-open",221,"star-square-dot",321,"star-square-open-dot",22,"star-diamond",122,"star-diamond-open",222,"star-diamond-dot",322,"star-diamond-open-dot",23,"diamond-tall",123,"diamond-tall-open",223,"diamond-tall-dot",323,"diamond-tall-open-dot",24,"diamond-wide",124,"diamond-wide-open",224,"diamond-wide-dot",324,"diamond-wide-open-dot",25,"hourglass",125,"hourglass-open",26,"bowtie",126,"bowtie-open",27,"circle-cross",127,"circle-cross-open",28,"circle-x",128,"circle-x-open",29,"square-cross",129,"square-cross-open",30,"square-x",130,"square-x-open",31,"diamond-cross",131,"diamond-cross-open",32,"diamond-x",132,"diamond-x-open",33,"cross-thin",133,"cross-thin-open",34,"x-thin",134,"x-thin-open",35,"asterisk",135,"asterisk-open",36,"hash",136,"hash-open",236,"hash-dot",336,"hash-open-dot",37,"y-up",137,"y-up-open",38,"y-down",138,"y-down-open",39,"y-left",139,"y-left-open",40,"y-right",140,"y-right-open",41,"line-ew",141,"line-ew-open",42,"line-ns",142,"line-ns-open",43,"line-ne",143,"line-ne-open",44,"line-nw",144,"line-nw-open"],"valType":"enumerated","arrayOk":true},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"sizemode":{"role":"info","valType":"enumerated","values":["diameter","area"],"description":"Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.","dflt":"diameter"},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"valType":"number","description":"Sets the width (in px) of the lines bounding the marker points.","role":"style","arrayOk":true,"min":0},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.","dflt":null}},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"sizemin":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.","dflt":0,"min":0},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":true}},"fill":{"role":"style","valType":"enumerated","values":["none","toself"],"description":"Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.","dflt":"none"},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"lon":{"valType":"data_array","role":"data","description":"Sets the longitude coordinates (in degrees East)."},"type":"scattergeo","lonsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  lon ."},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the text font.","family":{"strict":true,"valType":"string","role":"style","arrayOk":true,"noBlank":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"textpositionsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  textposition ."},"locationssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  locations ."},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["lon","lat","location","text","name"],"role":"info","valType":"flaglist"},"lat":{"valType":"data_array","role":"data","description":"Sets the latitude coordinates (in degrees North)."},"latsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  lat ."},"line":{"color":{"valType":"color","role":"style","description":"Sets the line color."},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object"},"geo":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.","dflt":"geo"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.","dflt":false},"mode":{"description":"Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.","dflt":"markers","extras":["none"],"role":"info","flags":["lines","markers","text"],"valType":"flaglist"},"locationmode":{"role":"info","valType":"enumerated","values":["ISO-3","USA-states","country names"],"description":"Determines the set of locations used to match entries in `locations` to regions on the map.","dflt":"ISO-3"}},"meta":{"hrName":"scatter_geo","description":"The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`."}},"box":{"attributes":{"jitter":{"max":1,"valType":"number","role":"style","description":"Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).","min":0},"orientation":{"role":"style","valType":"enumerated","values":["v","h"],"description":"Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal)."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"marker":{"opacity":{"description":"Sets the marker opacity.","dflt":1,"min":0,"max":1,"role":"style","valType":"number","arrayOk":false},"outliercolor":{"valType":"color","role":"style","description":"Sets the color of the outlier sample points.","dflt":"rgba(0, 0, 0, 0)"},"color":{"valType":"color","role":"style","arrayOk":false,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"symbol":{"description":"Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.","dflt":"circle","role":"style","values":[0,"circle",100,"circle-open",200,"circle-dot",300,"circle-open-dot",1,"square",101,"square-open",201,"square-dot",301,"square-open-dot",2,"diamond",102,"diamond-open",202,"diamond-dot",302,"diamond-open-dot",3,"cross",103,"cross-open",203,"cross-dot",303,"cross-open-dot",4,"x",104,"x-open",204,"x-dot",304,"x-open-dot",5,"triangle-up",105,"triangle-up-open",205,"triangle-up-dot",305,"triangle-up-open-dot",6,"triangle-down",106,"triangle-down-open",206,"triangle-down-dot",306,"triangle-down-open-dot",7,"triangle-left",107,"triangle-left-open",207,"triangle-left-dot",307,"triangle-left-open-dot",8,"triangle-right",108,"triangle-right-open",208,"triangle-right-dot",308,"triangle-right-open-dot",9,"triangle-ne",109,"triangle-ne-open",209,"triangle-ne-dot",309,"triangle-ne-open-dot",10,"triangle-se",110,"triangle-se-open",210,"triangle-se-dot",310,"triangle-se-open-dot",11,"triangle-sw",111,"triangle-sw-open",211,"triangle-sw-dot",311,"triangle-sw-open-dot",12,"triangle-nw",112,"triangle-nw-open",212,"triangle-nw-dot",312,"triangle-nw-open-dot",13,"pentagon",113,"pentagon-open",213,"pentagon-dot",313,"pentagon-open-dot",14,"hexagon",114,"hexagon-open",214,"hexagon-dot",314,"hexagon-open-dot",15,"hexagon2",115,"hexagon2-open",215,"hexagon2-dot",315,"hexagon2-open-dot",16,"octagon",116,"octagon-open",216,"octagon-dot",316,"octagon-open-dot",17,"star",117,"star-open",217,"star-dot",317,"star-open-dot",18,"hexagram",118,"hexagram-open",218,"hexagram-dot",318,"hexagram-open-dot",19,"star-triangle-up",119,"star-triangle-up-open",219,"star-triangle-up-dot",319,"star-triangle-up-open-dot",20,"star-triangle-down",120,"star-triangle-down-open",220,"star-triangle-down-dot",320,"star-triangle-down-open-dot",21,"star-square",121,"star-square-open",221,"star-square-dot",321,"star-square-open-dot",22,"star-diamond",122,"star-diamond-open",222,"star-diamond-dot",322,"star-diamond-open-dot",23,"diamond-tall",123,"diamond-tall-open",223,"diamond-tall-dot",323,"diamond-tall-open-dot",24,"diamond-wide",124,"diamond-wide-open",224,"diamond-wide-dot",324,"diamond-wide-open-dot",25,"hourglass",125,"hourglass-open",26,"bowtie",126,"bowtie-open",27,"circle-cross",127,"circle-cross-open",28,"circle-x",128,"circle-x-open",29,"square-cross",129,"square-cross-open",30,"square-x",130,"square-x-open",31,"diamond-cross",131,"diamond-cross-open",32,"diamond-x",132,"diamond-x-open",33,"cross-thin",133,"cross-thin-open",34,"x-thin",134,"x-thin-open",35,"asterisk",135,"asterisk-open",36,"hash",136,"hash-open",236,"hash-dot",336,"hash-open-dot",37,"y-up",137,"y-up-open",38,"y-down",138,"y-down-open",39,"y-left",139,"y-left-open",40,"y-right",140,"y-right-open",41,"line-ew",141,"line-ew-open",42,"line-ns",142,"line-ns-open",43,"line-ne",143,"line-ne-open",44,"line-nw",144,"line-nw-open"],"valType":"enumerated","arrayOk":false},"role":"object","line":{"color":{"valType":"color","role":"style","arrayOk":false,"dflt":"#444","description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"width":{"description":"Sets the width (in px) of the lines bounding the marker points.","dflt":0,"min":0,"role":"style","valType":"number","arrayOk":false},"role":"object","outlierwidth":{"valType":"number","role":"style","description":"Sets the border line width (in px) of the outlier sample points.","dflt":1,"min":0},"outliercolor":{"valType":"color","role":"style","description":"Sets the border line color of the outlier sample points. Defaults to marker.color"}},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":false}},"y0":{"valType":"any","role":"info","description":"Sets the y coordinate of the box. See overview for more info."},"pointpos":{"max":2,"valType":"number","role":"style","description":"Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes","min":-2},"line":{"color":{"valType":"color","role":"style","description":"Sets the color of line bounding the box(es)."},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of line bounding the box(es).","dflt":2,"min":0},"role":"object"},"uid":{"valType":"string","role":"info","dflt":""},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"boxmean":{"role":"style","valType":"enumerated","values":[true,"sd",false],"description":"If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn.","dflt":false},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"type":"box","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"x0":{"valType":"any","role":"info","description":"Sets the x coordinate of the box. See overview for more info."},"whiskerwidth":{"description":"Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).","dflt":0.5,"min":0,"max":1,"role":"style","valType":"number"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"y":{"valType":"data_array","role":"data","description":"Sets the y sample data or coordinates. See overview for more info."},"x":{"valType":"data_array","role":"data","description":"Sets the x sample data or coordinates. See overview for more info."},"boxpoints":{"role":"style","valType":"enumerated","values":["all","outliers","suspectedoutliers",false],"description":"If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points","dflt":"outliers"}},"meta":{"description":"In vertical (horizontal) box plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one box per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. That box position is then positioned with with `name` or with `x0` (`y0`) if provided. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2) is marked by a line inside the box. By default, the whiskers correspond to the box' edges +/- 1.5 times the interquartile range (IQR = Q3-Q1), see *boxpoints* for other options."},"layoutAttributes":{"boxgroupgap":{"description":"Sets the gap (in plot fraction) between boxes of the same location coordinate.","dflt":0.3,"min":0,"max":1,"role":"style","valType":"number"},"boxmode":{"role":"info","valType":"enumerated","values":["group","overlay"],"description":"Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes.","dflt":"overlay"},"boxgap":{"description":"Sets the gap (in plot fraction) between boxes of adjacent location coordinates.","dflt":0.3,"min":0,"max":1,"role":"style","valType":"number"}}},"bar":{"attributes":{"textposition":{"description":"Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed). *auto* positions `text` inside or outside so that `text` size is maximized.","dflt":"none","values":["inside","outside","auto","none"],"role":"info","valType":"enumerated","arrayOk":true},"orientation":{"values":["v","h"],"valType":"enumerated","role":"info","description":"Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal)."},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"basesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  base ."},"marker":{"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"description":"Sets the width (in px) of the lines bounding the marker points.","dflt":0,"min":0,"role":"style","valType":"number","arrayOk":true},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.","dflt":null}},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."}},"y0":{"valType":"any","role":"info","description":"Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.","dflt":0},"tsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  t ."},"uid":{"valType":"string","role":"info","dflt":""},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"error_x":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"error_y":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"offset":{"valType":"number","role":"info","arrayOk":true,"dflt":null,"description":"Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead."},"rsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  r ."},"width":{"description":"Sets the bar width (in position axis units).","dflt":null,"min":0,"role":"info","valType":"number","arrayOk":true},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"bar","_deprecated":{"bardir":{"values":["v","h"],"valType":"enumerated","role":"info","description":"Renamed to `orientation`."}},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the font used for `text`.","family":{"description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true,"strict":true,"role":"style","valType":"string","arrayOk":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"outsidetextfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the font used for `text` lying outside the bar.","family":{"description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true,"strict":true,"role":"style","valType":"string","arrayOk":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"textpositionsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  textposition ."},"base":{"valType":"any","role":"info","arrayOk":true,"dflt":null,"description":"Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"dx":{"valType":"number","role":"info","description":"Sets the x coordinate step. See `x0` for more info.","dflt":1},"dy":{"valType":"number","role":"info","description":"Sets the y coordinate step. See `y0` for more info.","dflt":1},"x0":{"valType":"any","role":"info","description":"Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.","dflt":0},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"insidetextfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the font used for `text` lying inside the bar.","family":{"description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true,"strict":true,"role":"style","valType":"string","arrayOk":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"r":{"valType":"data_array","role":"data","description":"For polar chart only.Sets the radial coordinates."},"t":{"valType":"data_array","role":"data","description":"For polar chart only.Sets the angular coordinates."},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."},"offsetsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  offset ."}},"meta":{"description":"The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged."},"layoutAttributes":{"barmode":{"role":"info","valType":"enumerated","values":["stack","group","overlay","relative"],"description":"Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.","dflt":"group"},"barnorm":{"role":"info","valType":"enumerated","values":["","fraction","percent"],"description":"Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents.","dflt":""},"bargap":{"max":1,"valType":"number","role":"style","description":"Sets the gap (in plot fraction) between bars of adjacent location coordinates.","min":0},"bargroupgap":{"description":"Sets the gap (in plot fraction) between bars of the same location coordinate.","dflt":0,"min":0,"max":1,"role":"style","valType":"number"}}},"choropleth":{"attributes":{"zmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"text":{"valType":"data_array","role":"data","description":"Sets the text elements associated with each location."},"zmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"locations":{"valType":"data_array","role":"data","description":"Sets the coordinates via location IDs or names. See `locationmode` for more info."},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"marker":{"line":{"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"width":{"valType":"number","description":"Sets the width (in px) of the lines bounding the marker points.","role":"style","arrayOk":true,"min":0},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."}},"role":"object"},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"type":"choropleth","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"locationssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  locations ."},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":true},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["location","z","text","name","name"],"role":"info","valType":"flaglist"},"geo":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.","dflt":"geo"},"zauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"z":{"valType":"data_array","role":"data","description":"Sets the color values."},"locationmode":{"role":"info","valType":"enumerated","values":["ISO-3","USA-states","country names"],"description":"Determines the set of locations used to match entries in `locations` to regions on the map.","dflt":"ISO-3"}},"meta":{"description":"The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`."}},"candlestick":{"attributes":{"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points."},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"high":{"valType":"data_array","role":"data","description":"Sets the high values.","dflt":[]},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"close":{"valType":"data_array","role":"data","description":"Sets the close values.","dflt":[]},"open":{"valType":"data_array","role":"data","description":"Sets the open values.","dflt":[]},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"opensrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  open ."},"low":{"valType":"data_array","role":"data","description":"Sets the low values.","dflt":[]},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"highsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  high ."},"increasing":{"role":"object","showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this segment is shown in the legend.","dflt":true},"line":{"color":{"valType":"color","role":"style","description":"Sets the color of line bounding the box(es).","dflt":"#3D9970"},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of line bounding the box(es).","dflt":2,"min":0},"role":"object"},"name":{"valType":"string","role":"info","description":"Sets the segment name. The segment name appear as the legend item and on hover."},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."}},"type":"candlestick","opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"line":{"width":{"valType":"number","role":"style","description":"Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.","dflt":2,"min":0},"role":"object"},"whiskerwidth":{"description":"Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).","dflt":0,"min":0,"max":1,"role":"style","valType":"number"},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"lowsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  low ."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"decreasing":{"role":"object","showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this segment is shown in the legend.","dflt":true},"line":{"color":{"valType":"color","role":"style","description":"Sets the color of line bounding the box(es).","dflt":"#FF4136"},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of line bounding the box(es).","dflt":2,"min":0},"role":"object"},"name":{"valType":"string","role":"info","description":"Sets the segment name. The segment name appear as the legend item and on hover."},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."}},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates. If absent, linear coordinate will be generated."},"closesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  close ."}},"meta":{"description":"The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red."}},"histogram2dcontour":{"attributes":{"zmax":{"valType":"number","role":"info","description":"Sets the upper bound of color domain.","dflt":null},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"zsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  z ."},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"zmin":{"valType":"number","role":"info","description":"Sets the lower bound of color domain.","dflt":null},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"marker":{"color":{"valType":"data_array","role":"data","description":"Sets the aggregation data."},"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"role":"object"},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"reversescale":{"valType":"boolean","role":"style","description":"Reverses the colorscale.","dflt":false},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"ncontours":{"valType":"integer","role":"style","description":"Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.","dflt":15,"min":1},"contours":{"coloring":{"role":"style","valType":"enumerated","values":["fill","heatmap","lines","none"],"description":"Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.","dflt":"fill"},"end":{"valType":"number","role":"style","description":"Sets the end contour level value. Must be more than `contours.start`","dflt":null},"showlines":{"valType":"boolean","role":"style","description":"Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.","dflt":true},"start":{"valType":"number","role":"style","description":"Sets the starting contour level value. Must be less than `contours.end`","dflt":null},"role":"object","size":{"valType":"number","role":"style","description":"Sets the step between each contour level. Must be positive.","dflt":null,"min":0}},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"type":"histogram2dcontour","ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"autocontour":{"valType":"boolean","role":"style","description":"Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.","dflt":true},"autocolorscale":{"valType":"boolean","role":"style","description":"Determines whether or not the colorscale is picked using the sign of the input z values.","dflt":true},"nbinsx":{"valType":"integer","role":"style","description":"Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.","dflt":0,"min":0},"nbinsy":{"valType":"integer","role":"style","description":"Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data.","dflt":0,"min":0},"histfunc":{"role":"style","valType":"enumerated","values":["count","sum","avg","min","max"],"description":"Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.","dflt":"count"},"xbins":{"start":{"valType":"any","role":"style","description":"Sets the starting value for the x axis bins.","dflt":null},"role":"object","end":{"valType":"any","role":"style","description":"Sets the end value for the x axis bins.","dflt":null},"size":{"valType":"any","role":"style","description":"Sets the step in-between value each x axis bin.","dflt":null}},"showscale":{"valType":"boolean","role":"info","description":"Determines whether or not a colorbar is displayed for this trace.","dflt":true},"line":{"color":{"valType":"color","role":"style","description":"Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*."},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"role":"object","smoothing":{"description":"Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.","dflt":1,"min":0,"max":1.3,"role":"style","valType":"number"}},"ybins":{"start":{"valType":"any","role":"style","description":"Sets the starting value for the y axis bins.","dflt":null},"role":"object","end":{"valType":"any","role":"style","description":"Sets the end value for the y axis bins.","dflt":null},"size":{"valType":"any","role":"style","description":"Sets the step in-between value each y axis bin.","dflt":null}},"autobiny":{"valType":"boolean","role":"style","description":"Determines whether or not the y axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in ybins.","dflt":null},"autobinx":{"valType":"boolean","role":"style","description":"Determines whether or not the x axis bin attributes are picked by an algorithm. Note that this should be set to false if you want to manually set the number of bins using the attributes in xbins.","dflt":null},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax"},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"histnorm":{"role":"style","valType":"enumerated","values":["","percent","probability","density","probability density"],"description":"Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1).","dflt":""},"zauto":{"valType":"boolean","role":"info","description":"Determines the whether or not the color domain is computed with respect to the input data.","dflt":true},"y":{"valType":"data_array","role":"data","description":"Sets the sample data to be binned on the y axis."},"x":{"valType":"data_array","role":"data","description":"Sets the sample data to be binned on the x axis."},"z":{"valType":"data_array","role":"data","description":"Sets the aggregation data."}},"meta":{"hrName":"histogram_2d_contour","description":"The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot."}},"scatter":{"attributes":{"textposition":{"description":"Sets the positions of the `text` elements with respects to the (x,y) coordinates.","dflt":"middle center","role":"style","values":["top left","top center","top right","middle left","middle center","middle right","bottom left","bottom center","bottom right"],"valType":"enumerated","arrayOk":true},"uid":{"valType":"string","role":"info","dflt":""},"stream":{"token":{"strict":true,"valType":"string","role":"info","description":"The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.","noBlank":true},"role":"object","maxpoints":{"description":"Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.","dflt":500,"min":0,"max":10000,"role":"info","valType":"number"}},"text":{"valType":"string","role":"info","arrayOk":true,"dflt":"","description":"Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."},"ycalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `y` date data.","dflt":"gregorian"},"hoverinfo":{"description":"Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.","dflt":"all","extras":["all","none","skip"],"flags":["x","y","z","text","name"],"role":"info","valType":"flaglist"},"xsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  x ."},"visible":{"role":"info","valType":"enumerated","values":[true,false,"legendonly"],"description":"Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).","dflt":true},"xcalendar":{"role":"info","valType":"enumerated","values":["gregorian","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura"],"description":"Sets the calendar system to use with `x` date data.","dflt":"gregorian"},"marker":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.","dflt":null},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"description":"Sets the marker size (in px).","dflt":6,"min":0,"role":"style","valType":"number","arrayOk":true},"colorbar":{"yanchor":{"role":"style","valType":"enumerated","values":["top","middle","bottom"],"description":"Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.","dflt":"middle"},"showexponent":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.","dflt":"all"},"showticklabels":{"valType":"boolean","role":"style","description":"Determines whether or not the tick labels are drawn.","dflt":true},"lenmode":{"role":"info","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.","dflt":"fraction"},"showticksuffix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"Same as `showtickprefix` but for tick suffixes.","dflt":"all"},"titlefont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets this color bar's title font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"borderwidth":{"valType":"number","role":"style","description":"Sets the width (in px) or the border enclosing this color bar.","dflt":0,"min":0},"tickvalssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  tickvals ."},"nticks":{"valType":"integer","role":"style","description":"Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.","dflt":0,"min":0},"showtickprefix":{"role":"style","valType":"enumerated","values":["all","first","last","none"],"description":"If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.","dflt":"all"},"titleside":{"role":"style","valType":"enumerated","values":["right","top","bottom"],"description":"Determines the location of the colorbar title with respect to the color bar.","dflt":"top"},"outlinecolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"tickprefix":{"valType":"string","role":"style","description":"Sets a tick label prefix.","dflt":""},"tickformat":{"valType":"string","role":"style","description":"Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*","dflt":""},"tickmode":{"role":"info","valType":"enumerated","values":["auto","linear","array"],"description":"Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."},"title":{"valType":"string","role":"info","description":"Sets the title of the color bar.","dflt":"Click to enter colorscale title"},"ticks":{"role":"style","valType":"enumerated","values":["outside","inside",""],"description":"Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.","dflt":""},"thickness":{"valType":"number","role":"style","description":"Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.","dflt":30,"min":0},"bgcolor":{"valType":"color","role":"style","description":"Sets the color of padded area.","dflt":"rgba(0,0,0,0)"},"role":"object","outlinewidth":{"valType":"number","role":"style","description":"Sets the width (in px) of the axis line.","dflt":1,"min":0},"ticktextsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ticktext ."},"bordercolor":{"valType":"color","role":"style","description":"Sets the axis line color.","dflt":"#444"},"xanchor":{"role":"style","valType":"enumerated","values":["left","center","right"],"description":"Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.","dflt":"left"},"separatethousands":{"valType":"boolean","role":"style","description":"If \"true\", even 4-digit integers are separated","dflt":false},"ticklen":{"valType":"number","role":"style","description":"Sets the tick length (in px).","dflt":5,"min":0},"len":{"valType":"number","role":"style","description":"Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.","dflt":1,"min":0},"ticksuffix":{"valType":"string","role":"style","description":"Sets a tick label suffix.","dflt":""},"tickcolor":{"valType":"color","role":"style","description":"Sets the tick color.","dflt":"#444"},"ticktext":{"valType":"data_array","role":"data","description":"Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."},"xpad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the x direction.","dflt":10,"min":0},"tickvals":{"valType":"data_array","role":"data","description":"Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."},"tickfont":{"color":{"valType":"color","role":"style"},"role":"object","description":"Sets the tick font.","family":{"strict":true,"valType":"string","role":"style","description":"HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.","noBlank":true},"size":{"valType":"number","role":"style","min":1}},"tickwidth":{"valType":"number","role":"style","description":"Sets the tick width (in px).","dflt":1,"min":0},"tick0":{"valType":"any","role":"style","description":"Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."},"tickangle":{"valType":"angle","role":"style","description":"Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.","dflt":"auto"},"dtick":{"valType":"any","role":"style","description":"Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"},"ypad":{"valType":"number","role":"style","description":"Sets the amount of padding (in px) along the y direction.","dflt":10,"min":0},"exponentformat":{"role":"style","valType":"enumerated","values":["none","e","E","power","SI","B"],"description":"Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.","dflt":"B"},"y":{"description":"Sets the y position of the color bar (in plot fraction).","dflt":0.5,"min":-2,"max":3,"role":"style","valType":"number"},"x":{"description":"Sets the x position of the color bar (in plot fraction).","dflt":1.02,"min":-2,"max":3,"role":"style","valType":"number"},"thicknessmode":{"role":"style","valType":"enumerated","values":["fraction","pixels"],"description":"Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.","dflt":"pixels"}},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"opacitysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  opacity ."},"maxdisplayed":{"valType":"number","role":"style","description":"Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.","dflt":0,"min":0},"role":"object","opacity":{"description":"Sets the marker opacity.","min":0,"max":1,"role":"style","valType":"number","arrayOk":true},"sizeref":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.","dflt":1},"symbol":{"description":"Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.","dflt":"circle","role":"style","values":[0,"circle",100,"circle-open",200,"circle-dot",300,"circle-open-dot",1,"square",101,"square-open",201,"square-dot",301,"square-open-dot",2,"diamond",102,"diamond-open",202,"diamond-dot",302,"diamond-open-dot",3,"cross",103,"cross-open",203,"cross-dot",303,"cross-open-dot",4,"x",104,"x-open",204,"x-dot",304,"x-open-dot",5,"triangle-up",105,"triangle-up-open",205,"triangle-up-dot",305,"triangle-up-open-dot",6,"triangle-down",106,"triangle-down-open",206,"triangle-down-dot",306,"triangle-down-open-dot",7,"triangle-left",107,"triangle-left-open",207,"triangle-left-dot",307,"triangle-left-open-dot",8,"triangle-right",108,"triangle-right-open",208,"triangle-right-dot",308,"triangle-right-open-dot",9,"triangle-ne",109,"triangle-ne-open",209,"triangle-ne-dot",309,"triangle-ne-open-dot",10,"triangle-se",110,"triangle-se-open",210,"triangle-se-dot",310,"triangle-se-open-dot",11,"triangle-sw",111,"triangle-sw-open",211,"triangle-sw-dot",311,"triangle-sw-open-dot",12,"triangle-nw",112,"triangle-nw-open",212,"triangle-nw-dot",312,"triangle-nw-open-dot",13,"pentagon",113,"pentagon-open",213,"pentagon-dot",313,"pentagon-open-dot",14,"hexagon",114,"hexagon-open",214,"hexagon-dot",314,"hexagon-open-dot",15,"hexagon2",115,"hexagon2-open",215,"hexagon2-dot",315,"hexagon2-open-dot",16,"octagon",116,"octagon-open",216,"octagon-dot",316,"octagon-open-dot",17,"star",117,"star-open",217,"star-dot",317,"star-open-dot",18,"hexagram",118,"hexagram-open",218,"hexagram-dot",318,"hexagram-open-dot",19,"star-triangle-up",119,"star-triangle-up-open",219,"star-triangle-up-dot",319,"star-triangle-up-open-dot",20,"star-triangle-down",120,"star-triangle-down-open",220,"star-triangle-down-dot",320,"star-triangle-down-open-dot",21,"star-square",121,"star-square-open",221,"star-square-dot",321,"star-square-open-dot",22,"star-diamond",122,"star-diamond-open",222,"star-diamond-dot",322,"star-diamond-open-dot",23,"diamond-tall",123,"diamond-tall-open",223,"diamond-tall-dot",323,"diamond-tall-open-dot",24,"diamond-wide",124,"diamond-wide-open",224,"diamond-wide-dot",324,"diamond-wide-open-dot",25,"hourglass",125,"hourglass-open",26,"bowtie",126,"bowtie-open",27,"circle-cross",127,"circle-cross-open",28,"circle-x",128,"circle-x-open",29,"square-cross",129,"square-cross-open",30,"square-x",130,"square-x-open",31,"diamond-cross",131,"diamond-cross-open",32,"diamond-x",132,"diamond-x-open",33,"cross-thin",133,"cross-thin-open",34,"x-thin",134,"x-thin-open",35,"asterisk",135,"asterisk-open",36,"hash",136,"hash-open",236,"hash-dot",336,"hash-open-dot",37,"y-up",137,"y-up-open",38,"y-down",138,"y-down-open",39,"y-left",139,"y-left-open",40,"y-right",140,"y-right-open",41,"line-ew",141,"line-ew-open",42,"line-ns",142,"line-ns-open",43,"line-ne",143,"line-ne-open",44,"line-nw",144,"line-nw-open"],"valType":"enumerated","arrayOk":true},"symbolsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  symbol ."},"showscale":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.","dflt":false},"line":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"autocolorscale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.","dflt":true},"cmin":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.","dflt":null},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"color":{"valType":"color","role":"style","arrayOk":true,"description":"Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"width":{"valType":"number","description":"Sets the width (in px) of the lines bounding the marker points.","role":"style","arrayOk":true,"min":0},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"role":"object","widthsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  width ."},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.","dflt":null}},"colorscale":{"valType":"colorscale","role":"style","description":"Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"},"reversescale":{"valType":"boolean","role":"style","description":"Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).","dflt":false},"sizemode":{"role":"info","valType":"enumerated","values":["diameter","area"],"description":"Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.","dflt":"diameter"},"cauto":{"valType":"boolean","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.","dflt":true},"cmax":{"valType":"number","role":"info","description":"Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.","dflt":null},"sizemin":{"valType":"number","role":"style","description":"Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.","dflt":0,"min":0}},"y0":{"valType":"any","role":"info","description":"Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.","dflt":0},"tsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  t ."},"line":{"simplify":{"valType":"boolean","role":"info","description":"Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.","dflt":true},"color":{"valType":"color","role":"style","description":"Sets the line color."},"smoothing":{"description":"Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).","dflt":1,"min":0,"max":1.3,"role":"style","valType":"number"},"dash":{"role":"style","valType":"string","values":["solid","dot","dash","longdash","dashdot","longdashdot"],"description":"Sets the style of the lines. Set to a dash string type or a dash length in px.","dflt":"solid"},"width":{"valType":"number","role":"style","description":"Sets the line width (in px).","dflt":2,"min":0},"shape":{"role":"style","valType":"enumerated","values":["linear","spline","hv","vh","hvh","vhv"],"description":"Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.","dflt":"linear"},"role":"object"},"hoveron":{"role":"info","valType":"flaglist","flags":["points","fills"],"description":"Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*."},"fill":{"role":"style","valType":"enumerated","values":["none","tozeroy","tozerox","tonexty","tonextx","toself","tonext"],"description":"Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.","dflt":"none"},"showlegend":{"valType":"boolean","role":"info","description":"Determines whether or not an item corresponding to this trace is shown in the legend.","dflt":true},"error_x":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"error_y":{"copy_ystyle":{"valType":"boolean","role":"style"},"arraysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  array ."},"tracerefminus":{"valType":"integer","role":"info","dflt":0,"min":0},"width":{"valType":"number","role":"style","description":"Sets the width (in px) of the cross-bar at both ends of the error bars.","min":0},"copy_zstyle":{"valType":"boolean","role":"style"},"value":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.","dflt":10,"min":0},"thickness":{"valType":"number","role":"style","description":"Sets the thickness (in px) of the error bars.","dflt":2,"min":0},"symmetric":{"valType":"boolean","role":"info","description":"Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."},"visible":{"valType":"boolean","role":"info","description":"Determines whether or not this set of error bars is visible."},"traceref":{"valType":"integer","role":"info","dflt":0,"min":0},"valueminus":{"valType":"number","role":"info","description":"Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars","dflt":10,"min":0},"role":"object","arrayminus":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."},"arrayminussrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  arrayminus ."},"array":{"valType":"data_array","role":"data","description":"Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."},"type":{"role":"info","valType":"enumerated","values":["percent","constant","sqrt","data"],"description":"Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."},"color":{"valType":"color","role":"style","description":"Sets the stoke color of the error bars."},"_deprecated":{"opacity":{"valType":"number","role":"style","description":"Obsolete. Use the alpha channel in error bar `color` to set the opacity."}}},"textsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  text ."},"rsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  r ."},"xaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.","dflt":"x"},"ysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  y ."},"type":"scatter","t":{"valType":"data_array","role":"data","description":"For polar chart only.Sets the angular coordinates."},"opacity":{"description":"Sets the opacity of the trace.","dflt":1,"min":0,"max":1,"role":"style","valType":"number"},"textfont":{"colorsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  color ."},"description":"Sets the text font.","family":{"strict":true,"valType":"string","role":"style","arrayOk":true,"noBlank":true},"color":{"valType":"color","role":"style","arrayOk":true},"familysrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  family ."},"role":"object","sizesrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  size ."},"size":{"valType":"number","role":"style","arrayOk":true,"min":1}},"legendgroup":{"valType":"string","role":"info","description":"Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.","dflt":""},"textpositionsrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  textposition ."},"fillcolor":{"valType":"color","role":"style","description":"Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."},"dx":{"valType":"number","role":"info","description":"Sets the x coordinate step. See `x0` for more info.","dflt":1},"dy":{"valType":"number","role":"info","description":"Sets the y coordinate step. See `y0` for more info.","dflt":1},"x0":{"valType":"any","role":"info","description":"Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.","dflt":0},"name":{"valType":"string","role":"info","description":"Sets the trace name. The trace name appear as the legend item and on hover."},"yaxis":{"valType":"subplotid","role":"info","description":"Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.","dflt":"y"},"connectgaps":{"valType":"boolean","role":"info","description":"Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.","dflt":false},"ids":{"valType":"data_array","role":"data","description":"A list of keys for object constancy of data points during animation"},"idssrc":{"valType":"string","role":"info","description":"Sets the source reference on plot.ly for  ids ."},"r":{"valType":"data_array","role":"data","description":"For polar chart only.Sets the radial coordinates."},"mode":{"role":"info","valType":"flaglist","extras":["none"],"flags":["lines","markers","text"],"description":"Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*."},"y":{"valType":"data_array","role":"data","description":"Sets the y coordinates."},"x":{"valType":"data_array","role":"data","description":"Sets the x coordinates."}},"meta":{"description":"The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays."}}}}}